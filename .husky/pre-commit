#!/bin/bash

# Check if Husky is installed
if ! command -v husky &> /dev/null
then
    echo "Husky is not installed. Installing Husky..."
    npm install husky --save-dev
    npx husky install
else
    echo "Husky is already installed successfully."
fi

# Get the list of changed Apex (.cls) or LWC files
changed_files=$(git diff --cached --name-only | grep -E '\.cls$|\.lwc$')

# Check if there are any relevant changes
if [ -z "$changed_files" ]; then
  echo "No relevant changes to scan in the files."
  exit 0
fi

# Create a directory for scanner reports if it doesn't exist
mkdir -p scanner-reports

# Extract the changed lines and corresponding line numbers from the diff for each file
git diff --unified=0 --cached > changes.diff

# Loop through each changed file
while IFS= read -r file; do
  echo "Processing file: $file"

  # Clean file paths to make them compatible with filenames
  clean_file=$(basename "$file")
  
  # Extract the actual changed lines and corresponding line numbers for the file
  awk -v file="$file" '
    BEGIN {inside=0; start_line=0; line_offset=0}
    /^diff --git/ {inside=0}
    $0 ~ file {inside=1}
    inside && /^@@/ {split($0, arr, " "); gsub(",", "", arr[2]); start_line = substr(arr[2], 2); line_offset=0; next}
    inside && /^[+][^+]/ {print start_line + line_offset++}
  ' changes.diff > "changed_cls_lwc_lines_${clean_file}.txt"

  # If no changed lines are found for this file, skip it
  if [ ! -s "changed_cls_lwc_lines_${clean_file}.txt" ]; then
    echo "No changed lines found in $file"
    continue
  fi

  # Extract line numbers as an array for filtering later
  mapfile -t line_numbers < "changed_cls_lwc_lines_${clean_file}.txt"

  # Define the output path for the scanner report in CSV format
  output_file="scanner-reports/scanner-report-${clean_file}.csv"

  # Run the SFDX scanner on the file and generate the report in CSV format
  sf scanner:run --target "$file" --format "csv" --outfile "$output_file"

  # Ensure that the scanner report was generated
  if [ ! -f "$output_file" ]; then
    echo "Scanner report for $file not found."
    continue
  fi

  # Ensure that line_numbers is not empty
  if [ ${#line_numbers[@]} -eq 0 ]; then
    echo "No valid line numbers extracted for $file."
    continue
  fi

  # Convert the array of line numbers into a format that can be used by awk
  lines_for_filter=$(printf ",%s" "${line_numbers[@]}")
  lines_for_filter="${lines_for_filter:1}"

  # Filter the CSV scanner report based on the changed line numbers
  echo "Filtering scanner report for $file by changed lines..."
  awk -v lines="$lines_for_filter" '
  BEGIN {
    FS=OFS=",";  # Define CSV format
    split(lines, arr, ",");  # Split the line numbers into an array
    for (i in arr) {
      line_map[arr[i]] = 1  # Create a lookup for valid line numbers
    }
  }
  NR == 1 || (line_map[$4])  # $4 is the "Line" field in the CSV
  ' "$output_file" > "scanner-reports/filtered-scanner-report-${clean_file}.csv"

  # If no filtered report is found, skip
  if [ ! -s "scanner-reports/filtered-scanner-report-${clean_file}.csv" ]; then
    echo "No issues found for the changed lines in $file"
    continue
  fi

  echo "Filtered scanner report for $file:"
  cat "scanner-reports/filtered-scanner-report-${clean_file}.csv"

done <<< "$changed_files"

# Check if any filtered reports were generated
filtered_reports=$(ls scanner-reports/filtered-scanner-report-*.csv 2> /dev/null)
if [ -z "$filtered_reports" ]; then
  echo "No vulnerabilities found in the changed lines. Proceeding with commit."
  exit 0
fi

# Combine all filtered reports into one final report (optional)
# You can use a simple `cat` command for CSV, as there is no header duplication issue in CSV files
final_report="scanner-reports/final-filtered-scanner-report.csv"
cat scanner-reports/filtered-scanner-report-*.csv > "$final_report"

echo "Final filtered scanner report:"
cat "$final_report"

# Parse the final filtered scanner report and check for severity 3 issues (optional, CSV parsing in bash)
severity_fail_count=$(awk -F, '$2 == 3 {count++} END {print count}' "$final_report")  # $2 is the Severity column

# Output the fail count for debugging
echo "Severity Fail Count: $severity_fail_count"

# Block commit if there are severity 3 issues
if [ "$severity_fail_count" -gt 0 ]; then
  echo "Blocking your commit due to vulnerabilities found with severity 3."
  exit 1
else
  echo "No vulnerabilities found in changed lines. Proceeding with commit."
  exit 0
fi
