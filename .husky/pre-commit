#!/bin/bash

# Get the list of changed Apex (.cls) or LWC files
changed_files=$(git diff --cached --name-only | grep -E '\.cls$|\.lwc$')

# Check if there are any relevant changes
if [ -z "$changed_files" ]; then
  echo "No relevant changes to scan in the files."
  exit 0
fi

# Create a directory for scanner reports if it doesn't exist
mkdir -p scanner-reports

# Extract the changed lines and corresponding line numbers from the diff for each file
git diff --cached --unified=0 > changes.diff

# Loop through each changed file
while IFS= read -r file; do
  echo "Processing file: $file"

  # Clean file paths to make them compatible with filenames
  clean_file=$(basename "$file")

  # Extract only the added or modified lines for .cls and .lwc files
  line_numbers=$(awk -v file="$file" '
    BEGIN {inside=0; start_line=0; line_offset=0}
    /^diff --git/ {inside=0}
    $0 ~ file {inside=1}
    inside && /^@@/ {split($0, arr, " "); gsub(",", "", arr[2]); start_line = substr(arr[2], 2); next}
    inside && /^[+][^+]/ {line_offset++; print start_line + line_offset}
  ' changes.diff | uniq)

  # If no changed lines are found for this file, skip it
  if [ -z "$line_numbers" ]; then
    echo "No changed lines found in $file"
    continue
  fi

  # Convert the line numbers to a JSON array format for jq filtering
  line_numbers_array=$(echo "$line_numbers" | jq -R . | jq -s .)

  echo "Changed lines for $file: $line_numbers_array"

  # Define the output path for the scanner report in JSON format
  output_file="scanner-reports/scanner-report-${clean_file}.json"

  # Run the SFDX scanner on the file and generate the report in JSON format
  sf scanner:run --target "$file" --format "json" --outfile "$output_file"

  # Ensure that the scanner report was generated
  if [ ! -f "$output_file" ]; then
    echo "Scanner report for $file not found."
    continue
  fi

  # Filter the JSON scanner report based on the dynamically extracted changed line numbers
  echo "Filtering scanner report for $file for changed lines: $line_numbers_array"
  jq --argjson lines "$line_numbers_array" '
    [.[] | 
      {engine, fileName, violations: [.violations[] | select(.line as $ln | ($lines | map(tonumber) | index($ln) != null))]} | 
      select(.violations | length > 0)]
  ' "$output_file" > "scanner-reports/filtered-scanner-report-${clean_file}.json"

  # If no filtered report is found, skip
  if [ ! -s "scanner-reports/filtered-scanner-report-${clean_file}.json" ]; then
    echo "No issues found for changed lines in $file"
    continue
  fi

  echo "Filtered scanner report for $file (Changed lines):"
  cat "scanner-reports/filtered-scanner-report-${clean_file}.json"

done <<< "$changed_files"

# Check if any filtered reports were generated
filtered_reports=$(ls scanner-reports/filtered-scanner-report-*.json 2> /dev/null)
if [ -z "$filtered_reports" ]; then
  echo "No vulnerabilities found on the changed lines. Proceeding with commit."
  exit 0
fi

# Combine all filtered reports into one final report (optional)
final_report="scanner-reports/final-filtered-scanner-report.json"
jq -s 'add' scanner-reports/filtered-scanner-report-*.json > "$final_report"

echo "Final filtered scanner report (Changed lines):"
cat "$final_report"

# Parse the final filtered scanner report and check for severity 3 issues
severity_fail_count=$(jq '[.[] | select(.violations[]?.severity == 3)] | length' "$final_report")

# Output the fail count for debugging
echo "Severity Fail Count (Changed lines): $severity_fail_count"

# Block commit if there are severity 3 issues
if [ "$severity_fail_count" -gt 0 ]; then
  echo "Blocking your commit due to vulnerabilities found with severity 3 on changed lines."
  exit 1
else
  echo "No vulnerabilities with severity 3 found on changed lines. Proceeding with commit."
  exit 0
fi
