#!/bin/bash

# Prevent modification of Husky files
# if git diff --name-only --cached | grep -q ".husky/pre-commit\|.husky/post-commit"; then
#   echo "Error: pre-commit and post-commit files cannot be modified."
#   exit 1
# fi
# chmod 544 .husky/pre-commit
# chmod 544 .husky/post-commit

# Check if Husky is installed
if ! command -v husky &> /dev/null
then
    echo "Husky is not installed. Installing Husky..."
    npm install husky --save-dev
    npx husky install
else
    echo "Husky is already installed successfully."
fi

# Get the list of changed Apex (.cls) or LWC files
changed_files=$(git diff --cached --name-only | grep -E '\.cls$|\.lwc$')

# Check if there are any relevant changes
if [ -z "$changed_files" ]; then
  echo "No relevant changes to scan in the files."
  exit 0
fi

# Create a directory for scanner reports if it doesn't exist
mkdir -p scanner-reports

# Extract the changed lines and corresponding line numbers from the diff for each file
git diff --unified=0 --cached > changes.diff

# Loop through each changed file
while IFS= read -r file; do
  echo "Processing file: $file"

  # Remove leading slashes to make it compatible with file path
  clean_file=$(echo "$file" | sed 's#^\(\./\|/##')

  # Extract the changed lines and corresponding line numbers
  awk '
    BEGIN {valid_file=0} 
    /^diff --git/ {valid_file=0} 
    $0 ~ /\.cls$|\.lwc$/ {valid_file=1} 
    /^@@/ && valid_file {split($0, arr, " "); gsub(",", "", arr[2]); start = substr(arr[2], 2); line_offset=0; next}  
    /^[+][^+]/ && valid_file {print start + line_offset++, ":", substr($0, 2)}  
  ' changes.diff | grep -v '^+++' > changed_cls_lwc_lines.txt

  # If no lines are found for this file, skip it
  if [ ! -s changed_cls_lwc_lines.txt ]; then
    echo "No changed lines found in $file"
    continue
  fi

  # Define the output path for the scanner report
  output_file="scanner-reports/scanner-report-${clean_file}.json"

  # Run the SFDX scanner on the file and generate the report
  sf scanner:run --target "$file" --format "json" --outfile "$output_file"

  # Ensure that the scanner report was generated
  if [ ! -f "$output_file" ]; then
    echo "Scanner report for $file not found."
    continue
  fi

  # Read the changed lines from the file for filtering
  changed_lines=$(cut -d':' -f1 changed_cls_lwc_lines.txt | tr '\n' ' ')

  # Filter the scanner report based on the changed lines
  echo "Filtering scanner report for $file by changed lines..."
  jq --argfile lines <(echo "$changed_lines" | jq -R . | jq -s .) '
    .[] | select(.violations[]?.line as $line | $lines | index($line) != null)
  ' "$output_file" > "scanner-reports/filtered-scanner-report-${clean_file}.json"

  # If no filtered report is found, skip
  if [ ! -s "scanner-reports/filtered-scanner-report-${clean_file}.json" ]; then
    echo "No issues found for the changed lines in $file"
    continue
  fi

  echo "Filtered scanner report for $file:"
  cat "scanner-reports/filtered-scanner-report-${clean_file}.json"

done <<< "$changed_files"

# Check if any filtered reports were generated
filtered_reports=$(ls scanner-reports/filtered-scanner-report-*.json 2> /dev/null)
if [ -z "$filtered_reports" ]; then
  echo "No vulnerabilities found in the changed lines. Proceeding with commit."
  exit 0
fi

# Combine all filtered reports into one final report
jq -s '.' scanner-reports/filtered-scanner-report-*.json > scanner-reports/final-filtered-scanner-report.json

# Parse the final filtered scanner report and check for severity 3 issues
severity_fail_count=$(jq '[.[].violations[]? | select(.severity == 3)] | length' scanner-reports/final-filtered-scanner-report.json)

# Output the fail count for debugging
echo "Severity Fail Count: $severity_fail_count"

# Block commit if there are severity 3 issues
if [ "$severity_fail_count" -gt 0 ]; then
  echo "Blocking your commit due to vulnerabilities found with severity 3."
  exit 1
else
  echo "No vulnerabilities found in changed lines. Proceeding with commit."
  exit 0
fi
