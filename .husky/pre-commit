#!/bin/bash

# Prevent modification of Husky files
# if git diff --name-only --cached | grep -q ".husky/pre-commit\|.husky/post-commit"; then
#   echo "Error: pre-commit and post-commit files cannot be modified."
#   exit 1
# fi
# chmod 544 .husky/pre-commit
# chmod 544 .husky/post-commit

# Check if Husky is installed
# if ! command -v husky &> /dev/null
# then
#     echo "Husky is not installed. Installing Husky..."
#     npm install husky --save-dev
#     npx husky install
# else
#     echo "Husky is already installed Successfully."
# fi

# Get the list of changed Apex (.cls) or LWC files
changed_files=$(git diff --cached --name-only | grep -E '\.cls$|\.lwc$')

# Check if there are any relevant changes
if [ -z "$changed_files" ]; then
  echo "No relevant changes to scan in the files."
  exit 0
fi

# Convert changed_files into an array
changed_files_array=($changed_files)

# Run the SFDX scanner on each of the changed files and generate the report
sf scanner:run --target "${changed_files_array[@]}" --format "csv" --outfile "scanner-report.csv"

# Ensure that the scanner report was generated
if [ ! -f "scanner-report.csv" ]; then
  echo "Scanner report not found. Please check the scanner command."
  exit 1
fi

# Define the line numbers from the git diff
line_numbers=$(git diff --unified=0 | awk '/@@/ {split($0, arr, " "); gsub(",", "", arr[2]); start = substr(arr[2], 2); print start}')

# Filter scanner report based on line numbers
awk -v lines="$line_numbers" '
BEGIN {
  FPAT = "([^,]+)|(\"[^\"]+\")";  # Define how to match CSV fields
  split(lines, arr, " ");
  for (i in arr) {
    valid[arr[i]] = 1;  # Treat line numbers as strings
  }
}
NR == 1 || (substr($4, 2, length($4)-2) in valid) {  # Check if Line (stripped of quotes) is in valid lines
  print $0;  # Only print matching rows
}' scanner-report.csv > filtered-scanner-report.csv

# Check if the filtered report exists
if [ ! -f "filtered-scanner-report.csv" ]; then
  echo "Filtered scanner report not found."
  exit 1
fi

# Replace the original report with the filtered report
mv filtered-scanner-report.csv scanner-report.csv

# Parse the updated (filtered) scanner report and check for severity 3 issues
severity_fail_count=$(grep -oP '"severity":\s*(1|3)' scanner-report.csv | wc -l)

# Output the fail count for debugging
echo "Severity Fail Count: $severity_fail_count"

# Block commit if there are severity 3 issues
if [ "$severity_fail_count" -gt 0 ]; then
  echo "Blocking your commit due to vulnerabilities found with severity 3."
  exit 1
else
  echo "No vulnerabilities found. Proceeding with commit."
  exit 0
fi