#!/bin/bash

# Prevent modification of Husky files
# ...

# Check if Husky is installed
# ...

# Get the list of changed Apex (.cls) or LWC files
changed_files=$(git diff --cached --name-only | grep -E '\.cls$|\.lwc$')

# Check if there are any relevant changes
if [ -z "$changed_files" ]; then
  echo "No relevant changes to scan in the files."
  exit 0
fi

# Create a directory for scanner reports if it doesn't exist
mkdir -p scanner-reports

# Extract the changed lines and corresponding line numbers from the diff for each file
git diff --unified=0 --cached > changes.diff

# Extract and print only the changed lines and line numbers from .cls and .lwc files
echo "Processing changes for .cls and .lwc files only..."
awk '
  BEGIN {valid_file=0; file=""}
  /^diff --git/ {valid_file=0}
  /^diff --git a\/.* b\/(.*)/ {file=$3; sub(/^b\//,"",file)}
  $0 ~ /\.cls$|\.lwc$/ {valid_file=1}
  /^@@/ && valid_file {split($0, arr, " "); gsub(",", "", arr[2]); start = substr(arr[2], 2); line_offset=0; next}
  /^[+][^+]/ && valid_file {print file, start + line_offset++, ":", substr($0, 2)}
' changes.diff | grep -v '^+++' > changed_cls_lwc_lines.txt

# Check if any relevant changes were found in .cls or .lwc files
if [ ! -s changed_cls_lwc_lines.txt ]; then
  echo "No changes detected in .cls or .lwc files."
  exit 0
fi

cat changed_cls_lwc_lines.txt

# Process each file
for file in $changed_files; do
  echo "Processing file: $file"
  clean_file=$(basename "$file")
  echo "Clean file: $clean_file"

  # Define the output path for the scanner report
  output_file="scanner-reports/scanner-report-${clean_file}.json"

  # Run the SFDX scanner on the file and generate the report
  sf scanner:run --target "$file" --format "json" --outfile "$output_file"

  # Ensure that the scanner report was generated
  if [ ! -f "$output_file" ]; then
    echo "Scanner report for $file not found."
    continue
  fi

  # Extract line numbers for this file
  line_numbers=$(grep "^$file " changed_cls_lwc_lines.txt | cut -d':' -f1 | awk '{print $2}' | tr '\n' ' ')

  if [ -z "$line_numbers" ]; then
    echo "No changed lines found in $file"
    continue
  fi

  # Generate the select expression for jq
  select_expression=$(echo "$line_numbers" | awk '{for(i=1;i<=NF;i++) printf ".line == %s%s", $i, (i<NF ? " or " : "")}')

  # Filter the scanner report based on the changed lines
  echo "Filtering scanner report for $file by changed lines..."
  jq '
    .[] | .violations[]? | select('"$select_expression"')
  ' "$output_file" > "scanner-reports/filtered-scanner-report-${clean_file}.json"

  # If no filtered report is found, skip
  if [ ! -s "scanner-reports/filtered-scanner-report-${clean_file}.json" ]; then
    echo "No issues found for the changed lines in $file"
    continue
  fi

  echo "Filtered scanner report for $file:"
  cat "scanner-reports/filtered-scanner-report-${clean_file}.json"
done

# Check if any filtered reports were generated
filtered_reports=$(ls scanner-reports/filtered-scanner-report-*.json 2> /dev/null)
if [ -z "$filtered_reports" ]; then
  echo "No vulnerabilities found in the changed lines. Proceeding with commit."
  exit 0
fi

# Combine all filtered reports into one final report
jq -s '.' scanner-reports/filtered-scanner-report-*.json > scanner-reports/final-filtered-scanner-report.json

# Parse the final filtered scanner report and check for severity 3 issues
severity_fail_count=$(jq '[.[].severity | select(. == 3)] | length' scanner-reports/final-filtered-scanner-report.json)

# Output the fail count for debugging
echo "Severity Fail Count: $severity_fail_count"

# Block commit if there are severity 3 issues
if [ "$severity_fail_count" -gt 0 ]; then
  echo "Blocking your commit due to vulnerabilities found with severity 3."
  exit 1
else
  echo "No vulnerabilities found in changed lines. Proceeding with commit."
  exit 0
fi
