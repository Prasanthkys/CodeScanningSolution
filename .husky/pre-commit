#!/bin/bash
set -e

# Step 1: Get changed files and lines (for .cls and .lwc files)
echo "Fetching changed files and lines between HEAD~1 and HEAD"

git diff --unified=0 HEAD~1 HEAD > changes.diff || { echo "Failed to get git diff"; exit 1; }

if [ ! -s changes.diff ]; then
  echo "No changes detected between HEAD~1 and HEAD."
  exit 0
fi

echo "Processing changes for .cls and .lwc files only..."
files=$(grep -E '^\+\+\+ b/.*(\.cls|\.lwc)$' changes.diff | sed 's/+++ b\///')

if [ -z "$files" ]; then
  echo "No changed .cls or .lwc files detected."
  exit 0
fi

# Step 2: Run SFDX Scanner on each file (run once per file, not per line)
for file in $files; do
  echo "Running SFDX Scanner on file: $file"
  sf scanner:run --target "$file" --format "csv" --outfile "scanner-report.csv" || { echo "Scanner run failed for $file, skipping."; }
done

# Step 3: Filter the scanner report for specific lines
echo "Filtering scanner report for changed lines..."

# Extract the changed line numbers for each file and filter the scanner report
for file in $files; do
  echo "Processing file: $file"
  
  # Get lines that are added/modified (ignore deletions)
  line_numbers=$(grep -A 1000 "$file" changes.diff | grep -E '^\+[^\+]' | awk '{print $1}' | sed 's/^+//')

  # Validate if line numbers were captured
  if [ -z "$line_numbers" ]; then
    echo "No valid line numbers for file: $file"
    continue
  fi

  echo "Filtering results for file: $file with changed lines: $line_numbers"
  
  if [ -f scanner-report.csv ]; then
    # Filter scanner report for the relevant line numbers
    awk -v lines="$line_numbers" '
    BEGIN {
      FPAT = "([^,]+)|(\"[^\"]+\")";
      split(lines, arr, " ");
      for (i in arr) {
        valid[arr[i]] = 1;
      }
    }
    NR == 1 || (substr($4, 2, length($4)-2) in valid) {
      print $0;
    }
    ' scanner-report.csv > filtered-scanner-report.csv
    
    cat filtered-scanner-report.csv
  else
    echo "No scanner report found for $file."
  fi
done

# Step 4: Block commit if severity violations are found
if [ -f filtered-scanner-report.csv ]; then
  severity_fail_count=$(awk -F',' '{gsub(/^ *| *$/, "", $2); if($2 == "\"3\"") count++} END {print count}' filtered-scanner-report.csv)
  echo "Severity 3 issues count: $severity_fail_count"

  if [ -n "$severity_fail_count" ] && [ "$severity_fail_count" -gt 0 ]; then
    echo "Blocking your commit due to severity 3 vulnerabilities found."
    exit 1
  else
    echo "No severity 3 vulnerabilities found. Proceeding with commit."
  fi
else
  echo "No filtered scanner report found."
fi
