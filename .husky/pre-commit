#!/bin/bash

# Get the list of changed Apex (.cls) or LWC files
changed_files=$(git diff --cached --name-only | grep -E '\.cls$|\.lwc$')

# Check if there are any relevant changes
if [ -z "$changed_files" ]; then
  echo "No relevant changes to scan in the files."
  exit 0
fi

# Create a directory for scanner reports if it doesn't exist
mkdir -p scanner-reports

# Extract the changed lines and corresponding line numbers from the diff for each file
git diff --unified=0 --cached > changes.diff

# Loop through each changed file
while IFS= read -r file; do
  echo "Processing file: $file"

  # Clean file paths to make them compatible with filenames
  clean_file=$(basename "$file")

  # Define the output path for the scanner report in CSV format
  output_file="scanner-reports/scanner-report-${clean_file}.csv"

  # Run the SFDX scanner on the file and generate the report in CSV format
  sf scanner:run --target "$file" --format "csv" --outfile "$output_file"

  # Ensure that the scanner report was generated
  if [ ! -f "$output_file" ]; then
    echo "Scanner report for $file not found."
    continue
  fi

  # Filter the CSV scanner report for rows where the "Line" field equals "70"
  echo "Filtering scanner report for $file for Line '70'..."
  awk -F, 'NR == 1 || $4 == "70"' "$output_file" > "scanner-reports/filtered-scanner-report-${clean_file}.csv"

  # If no filtered report is found, skip
  if [ ! -s "scanner-reports/filtered-scanner-report-${clean_file}.csv" ]; then
    echo "No issues found for line '70' in $file"
    continue
  fi

  echo "Filtered scanner report for $file (Line '70'):"
  cat "scanner-reports/filtered-scanner-report-${clean_file}.csv"

done <<< "$changed_files"

# Check if any filtered reports were generated
filtered_reports=$(ls scanner-reports/filtered-scanner-report-*.csv 2> /dev/null)
if [ -z "$filtered_reports" ]; then
  echo "No vulnerabilities found on line '70'. Proceeding with commit."
  exit 0
fi

# Combine all filtered reports into one final report (optional)
final_report="scanner-reports/final-filtered-scanner-report.csv"
cat scanner-reports/filtered-scanner-report-*.csv > "$final_report"

echo "Final filtered scanner report (Line '70'):"
cat "$final_report"

# Parse the final filtered scanner report and check for severity 3 issues
severity_fail_count=$(awk -F, '$2 == 3 {count++} END {print count+0}' "$final_report")

# Output the fail count for debugging
echo "Severity Fail Count (Line '70'): $severity_fail_count"

# Block commit if there are severity 3 issues
if [ "$severity_fail_count" -gt 0 ]; then
  echo "Blocking your commit due to vulnerabilities found with severity 3 on Line '70'."
  exit 1
else
  echo "No vulnerabilities with severity 3 found on Line '70'. Proceeding with commit."
  exit 0
fi
