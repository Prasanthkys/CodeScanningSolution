name: SFDX Code Scan Delta

on:
  pull_request:
    branches:
      - "**"

jobs:
  quality-gate-code-check:
    runs-on: ubuntu-latest
    outputs:
      scanner-report-path: ${{ steps.upload-report.outputs.artifact-path }}
      block-pr: ${{ steps.block-check.outputs.block-status }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install Salesforce CLI
        run: npm install @salesforce/cli --global

      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner

      - name: Verify Salesforce CLI Installation
        run: sf --version

      - name: Verify Scanner Plugin Installation
        run: sf plugins --core

      - name: Get changed files and lines (for .cls and .lwc files)
        id: get-changes
        run: |
          # Compare only the current commit (HEAD) to its parent (HEAD^)
          echo "Fetching changed files and lines in the current commit (HEAD)"
          git diff --unified=0 HEAD^ HEAD > changes.diff || { echo "Failed to get git diff"; exit 1; }

          if [ ! -s changes.diff ]; then
            echo "No changes detected in the current commit."
            exit 0
          fi

          echo "Processing changes for .cls and .lwc files only..."
          awk '
            BEGIN {valid_file=0; line_offset=0}
            /^diff --git/ {valid_file=0} # Reset valid file flag
            /\.cls$|\.lwc$/ {valid_file=1} # Set valid file flag if .cls or .lwc file is detected
            /^@@/ && valid_file {
              split($0, arr, " ");
              gsub(",", "", arr[2]); # Extract line range
              line_offset = substr(arr[2], 2); # Starting line number of the changed block
              next
            }
            /^[+][^+]/ && valid_file {
              print line_offset++; # Print the actual line number of the added/modified line
            }
          ' changes.diff | grep -v '^+++' > changed_cls_lwc_lines.txt

          if [ ! -s changed_cls_lwc_lines.txt ]; then
            echo "No changes detected in .cls or .lwc files."
            exit 0
          fi

          echo "Changed lines in .cls and .lwc files:"
          cat changed_cls_lwc_lines.txt

      - name: Run SFDX Scanner on Changed Files
        run: |
          files=$(grep -E '^\+\+\+ b/.*(\.cls|\.lwc)$' changes.diff | sed 's/+++ b\///')
          if [ -z "$files" ]; then
            echo "No changed .cls or .lwc files detected."
            exit 0
          fi

          declare -a line_numbers_array=()

          # Iterate over each changed file
          while IFS= read -r file; do
            echo "Processing file: $file"
            file=$(echo "$file" | tr -d '"')
            
            # Extract the line numbers for the specific file from current commit
            changed_lines=$(cat changed_cls_lwc_lines.txt)
            for changed_line in $changed_lines; do
              line_numbers_array+=("$changed_line")
            done

            # Run SFDX scanner ONCE for the file
            echo "Running SFDX Scanner on file: $file..."
            sf scanner:run --target "$file" --format "csv" --outfile "scanner-report.csv" || { echo "Scanner run failed or no issues found for $file, continuing with other files."; }
          done <<< "$files"

          # Save all captured line numbers for filtering
          echo "${line_numbers_array[*]}" > line_numbers.txt
          cat line_numbers.txt

      - name: Filter Scanner Report by Line Numbers
        run: |
          current_line_number_list=$(cat line_numbers.txt)

          # If there are no line numbers, exit early
          if [ -z "$current_line_number_list" ]; then
            echo "No current line numbers found."
            exit 0
          fi

          echo "Filtering scanner report for the following line numbers: $current_line_number_list"

          # Use awk to filter the scanner report by the line numbers in the list
          awk -v lines="$current_line_number_list" '
          BEGIN {
            FPAT = "([^,]+)|(\"[^\"]+\")"; # Handles CSV fields with or without quotes
            split(lines, arr, " "); # Split line number list into an array
            for (i in arr) {
              valid[arr[i]] = 1; # Mark the line numbers as valid
            }
          }
          NR == 1 || (valid[substr($4, 2, length($4)-2)]) { # Check if the line number is valid
            print $0; # Print the header or the matching lines
          }
          ' scanner-report.csv > filtered-scanner-report.csv

          # Check if the filtered report contains data
          if [ ! -s filtered-scanner-report.csv ]; then
            echo "No relevant issues found in the current changed lines."
            exit 0
          fi

          echo "Filtered scanner report:"
          cat filtered-scanner-report.csv

      - name: Block PR merge if severity violations are found
        id: block-check
        run: |
          if [ -f filtered-scanner-report.csv ]; then
            severity_fail_count=$(awk -F',' '{gsub(/^ *| *$/, "", $2); if($2 == "\"3\"") count++} END {print count}' filtered-scanner-report.csv)
            echo "Severity 3 issues count: $severity_fail_count"
            if [ "$severity_fail_count" -gt 0 ]; then
              echo "Blocking your pull request due to severity 3 vulnerabilities found."
              echo "::set-output name=block-status::true"
              exit 1
            else
              echo "No severity 3 vulnerabilities found. Proceeding with Approval."
              echo "::set-output name=block-status::false"
            fi
          else
            echo "No filtered scanner report found."
            exit 1
          fi

      - name: Upload Filtered Scanner Report
        id: upload-report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: SFDX_Code_Scan_Report
          path: filtered-scanner-report.csv

      - name: Install mailx
        run: sudo apt-get install -y mailutils

      - name: Get Repository and Branch Info
        id: get-info
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          BRANCH_NAME=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          COMMIT_LABEL=$(git log -1 --pretty=format:'%s')
          FILE_TITLE="Code Scanner Delta Report_${REPO_NAME}_${BRANCH_NAME}_${COMMIT_LABEL}"
          echo "FILE_TITLE=${FILE_TITLE}" >> $GITHUB_ENV

      - name: Upload Scanner Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.FILE_TITLE }}
          path: filtered-scanner-report.csv

      - name: Get Pusher's Email
        id: get-pusher-email
        run: |
          COMMIT_SHA=${{ github.sha }}
          REPO=${{ github.repository }}
          PUSHER_EMAIL=$(curl -s -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            "https://api.github.com/repos/${REPO}/commits/${COMMIT_SHA}" | jq -r '.commit.committer.email')
          echo "PUSHER_EMAIL=${PUSHER_EMAIL}" >> $GITHUB_ENV

      - name: Send Email with actions-send-mail
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: "smtp.gmail.com"
          server_port: "587"
          username: ${{ secrets.GMAIL_EMAIL }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          from: ${{ secrets.GMAIL_EMAIL }}
          subject: "SFDX Code Scan Delta Report"
          body: "Please find the attached SFDX Code Scan Delta Report."
          to: ${{ env.PUSHER_EMAIL }}, ${{ secrets.GMAIL_EMAIL }}
          attachments: filtered-scanner-report.csv

  quality-gate-critical-permissions-check:
    runs-on: ubuntu-latest
    needs: quality-gate-code-check
    if: ${{ needs.quality-gate-code-check.outputs.block-pr == 'false' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Scanner Report
        uses: actions/download-artifact@v3
        with:
          name: SFDX_Code_Scan_Report

      - name: Scan Profiles and Permission Sets for Critical Permissions
        run: |
          CRITICAL_PERMISSIONS=( "AssignPermissionSets" "AuthorApex" ... )
          # Critical Permissions Check Logic
