name: SFDX Quality Gate

on:
  pull_request:
    branches:
      - "**"

jobs:
  quality-gate-code-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install Salesforce CLI
        run: npm install @salesforce/cli --global

      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner

      - name: Verify Salesforce CLI Installation
        run: sf --version

      - name: Verify Scanner Plugin Installation
        run: sf plugins --core

      - name: Get changed files and lines (for .cls and .lwc files)
        id: get-changes
        run: |
          git fetch --unshallow || true
          if [ "$(git rev-list --count HEAD)" -gt "1" ]; then
            echo "Fetching changed files and lines between HEAD~1 and HEAD"
            git diff --unified=0 HEAD~1 HEAD > changes.diff || { echo "Failed to get git diff"; exit 1; }
          else
            echo "No previous commit to compare to." > changes.diff
          fi

          if [ ! -s changes.diff ]; then
            echo "No changes detected between HEAD~1 and HEAD."
            exit 0
          fi

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Run Python script to get changed lines
        run: |
          python3 <<EOF
          import re

          # Open the diff file and process it
          with open('changes.diff', 'r') as diff_file:
              valid_file = False
              current_line_number = 0

              for line in diff_file:
                  if line.startswith('diff --git'):
                      valid_file = False  # Reset if we find a new diff
                  if re.search(r'\\.cls$|\\.lwc$', line):
                      valid_file = True  # If we find .cls or .lwc files, mark them as valid
                  if valid_file and line.startswith('@@'):
                      # Extract the starting line number from the @@ header
                      match = re.search(r'\\+([0-9]+)', line)
                      if match:
                          current_line_number = int(match.group(1))
                  if valid_file and line.startswith('+') and not line.startswith('+++'):
                      # This is a real changed line, not a context line or file path
                      print(f"Line {current_line_number}: {line[1:].strip()}")
                      current_line_number += 1  # Increment only for actual changed lines
          EOF

      - name: Run SFDX Scanner on Changed Files
        run: |
          files=$(grep -E '^\+\+\+ b/.*(\.cls|\.lwc)$' changes.diff | sed 's/+++ b\///')
          if [ -z "$files" ]; then
            echo "No changed .cls or .lwc files detected."
            exit 0
          fi

          declare -a line_numbers_array=()

          while IFS= read -r file; do
            echo "Processing file: $file"
            file=$(echo "$file" | tr -d '"')

            # Assuming the Python script output is processed separately, 
            # you can work with line numbers accordingly.
            changed_lines=$(grep "^Line" changed_cls_lwc_lines.txt | awk -F: '{print $2}' | xargs)
            line_numbers=$(grep "^Line" changed_cls_lwc_lines.txt | awk -F' ' '{print $2}' | xargs)

            if [ -z "$changed_lines" ]; then
              echo "No changes detected in file $file."
              continue
            fi

            echo "Running SFDX Scanner on the entire file: $file"
            sf scanner:run --target "$file" --format "csv" --outfile "scanner-report.csv" || { echo "Scanner run failed or no issues found for $file, continuing with other files."; }

            # Filter violations based on the changed lines
            echo "Filtering violations for lines: $line_numbers"
            
            # Safely grep and handle cases where no violations are found for the lines
            grep -E "$(echo "$line_numbers" | tr ' ' '|')" scanner-report.csv > filtered-scanner-report.csv || true

            if [ -s filtered-scanner-report.csv ]; then
              echo "Filtered violations for $file:"
              cat filtered-scanner-report.csv
            else
              echo "No violations found for the specified lines in $file."
            fi
          done <<< "$files"

          echo "${line_numbers_array[*]}" > line_numbers.txt
          cat line_numbers.txt

      - name: Filter Scanner Report by Line Numbers
        run: |
          current_line_number_list=$(cat line_numbers.txt)
          current_line_number_list=$(echo $current_line_number_list | xargs)
          echo "Filtering scanner report for the following line numbers: $current_line_number_list"
          awk -v lines="$current_line_number_list" '
          BEGIN {
            FPAT = "([^,]+)|(\"[^\"]+\")";
            split(lines, arr, " ");
            for (i in arr) {
              valid[arr[i]] = 1;
            }
          }
          NR == 1 || (substr($4, 2, length($4)-2) in valid) {
            print $0;
          }
          ' scanner-report.csv > filtered-scanner-report.csv
          cat filtered-scanner-report.csv

      - name: Block PR merge if severity violations are found
        id: block-check
        run: |
          if [ -f filtered-scanner-report.csv ]; then
            severity_fail_count=$(awk -F',' '{gsub(/^ *| *$/, "", $2); if($2 == "\"3\"") count++} END {print count}' filtered-scanner-report.csv)
            echo "Severity 3 issues count: $severity_fail_count"
            if [ "$severity_fail_count" -gt 0 ]; then
              echo "Blocking your pull request due to severity 3 vulnerabilities found."
              echo "::set-output name=block-status::true"
              exit 1
            else
              echo "No severity 3 vulnerabilities found. Proceeding with Approval."
              echo "::set-output name=block-status::false"
            fi
          else
            echo "No filtered scanner report found."
            exit 1
          fi

      - name: Upload Filtered Scanner Report
        id: upload-report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: SFDX_Code_Scan_Report
          path: filtered-scanner-report.csv

  quality-gate-critical-permissions-check:
    runs-on: ubuntu-latest
    needs: quality-gate-code-check
    if: ${{ needs.quality-gate-code-check.outputs.block-pr == 'false' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Scanner Report
        uses: actions/download-artifact@v3
        with:
          name: SFDX_Code_Scan_Report

      - name: Scan Profiles and Permission Sets for Critical Permissions
        run: |
          CRITICAL_PERMISSIONS=(
              "AssignPermissionSets"
              "AuthorApex"
              "CustomizeApplication"
              "FreezeUsers"
              "ManageEncryptionKeys"
              "ManageInternalUsers"
              "ManagePasswordPolicies"
              "ManageProfilesPermissionSets"
              "ManageRoles"
              "ManageSharing"
              "ManageUsers"
              "ModifyAllData"
              "MonitorLoginHistory"
              "MultiFactorAuthenticationRequired"
              "PasswordNeverExpires"
              "ResetPasswordsUnlockUsers"
              "ViewAllData"
          )

          BLOCKED_FILES=()

          for FILE in $(find force-app/main/default/profiles -name '*.profile-meta.xml'); do
            for PERMISSION in "${CRITICAL_PERMISSIONS[@]}"; do
              if grep -q "$PERMISSION" "$FILE" && ! grep -q "System Administrator" "$FILE"; then
                BLOCKED_FILES+=("$FILE")
              fi
            done
          done

          for FILE in $(find force-app/main/default/permissionsets -name '*.permissionset-meta.xml'); do
            for PERMISSION in "${CRITICAL_PERMISSIONS[@]}"; do
              if grep -q "$PERMISSION" "$FILE"; then
                BLOCKED_FILES+=("$FILE")
              fi
            done
          done

          if [ ${#BLOCKED_FILES[@]} -gt 0 ]; then
            echo "Critical permissions found in the following files:"
            for FILE in "${BLOCKED_FILES[@]}"; do
              echo "$FILE"
            done
            exit 1
          else
            echo "No critical permissions assigned to non-System Administrator profiles or permission sets."
          fi
