name: Graph-Based Code Analysis on Changed Lines

on:
  push:
    branches:
      - main
      - '**'

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install networkx matplotlib  # Example packages for graph analysis

      - name: Get Changed Lines
        id: get-changes
        run: |
          git fetch --unshallow || true
          if [ "$(git rev-list --count HEAD)" -gt "1" ]; then
            echo "Fetching changes between HEAD~1 and HEAD"
            git diff HEAD~1 HEAD --unified=0 > changed_lines.diff
          else
            echo "No previous commit to compare to." > changed_lines.diff
          fi
          cat changed_lines.diff

      - name: Run Graph Analysis on Changed Lines
        if: success()
        run: |
          if [ -s changed_lines.diff ]; then
            echo "Running graph-based analysis on changed lines."
            python graph-analysis.py --diff-file "changed_lines.diff" --output "graph-analysis-report.csv" || { echo "Graph analysis failed"; exit 1; }
          else
            echo "No relevant changes detected."
            touch graph-analysis-report.csv
          fi

      - name: Encode CSV file to Base64
        if: success()
        id: encode_file
        run: |
          if [ -f graph-analysis-report.csv ]; then
            base64 graph-analysis-report.csv | tr -d '\n' > encoded_report.txt
          else
            echo "Graph analysis report CSV file not found."
            exit 1
          fi

      - name: Install mailx
        run: sudo apt-get install -y mailutils

      - name: Get Repository and Branch Info
        id: get-info
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          BRANCH_NAME=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          COMMIT_LABEL=$(git log -1 --pretty=format:'%s')
          FILE_TITLE="Graph-Based Code Analysis Report_${REPO_NAME}_${BRANCH_NAME}_${COMMIT_LABEL}"
          echo "FILE_TITLE=${FILE_TITLE}" >> $GITHUB_ENV

      - name: Upload Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.FILE_TITLE }}
          path: graph-analysis-report.csv

      - name: Get Pusher's Email
        id: get-pusher-email
        run: |
          COMMIT_SHA=${{ github.sha }}
          REPO=${{ github.repository }}
          PUSHER_EMAIL=$(curl -s -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            "https://api.github.com/repos/${REPO}/commits/${COMMIT_SHA}" | jq -r '.commit.committer.email')
          echo "PUSHER_EMAIL=${PUSHER_EMAIL}" >> $GITHUB_ENV

      - name: Upload CSV Report to Salesforce
        if: success()
        run: |
          if [ -s encoded_report.txt ]; then
            contentDocumentResponse=$(curl -X POST https://individual-fc-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion/ \
              -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{
                "Title": "'"${{ env.FILE_TITLE }}"'",
                "PathOnClient": "graph-analysis-report.csv",
                "VersionData": "'"$(cat encoded_report.txt)"'"
              }')
            echo "Response: $contentDocumentResponse"
            
            contentVersionId=$(echo $contentDocumentResponse | jq -r '.id // empty')
            if [ -z "$contentVersionId" ]; then
              echo "Error: Failed to upload file. No ContentVersionId found."
              exit 1
            fi
            echo "ContentVersionId: $contentVersionId"
            
            contentDocumentResponse=$(curl -X GET https://individual-fc-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion/$contentVersionId \
              -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}")
            echo "ContentDocument Response: $contentDocumentResponse"
            
            contentDocumentId=$(echo $contentDocumentResponse | jq -r '.ContentDocumentId // empty')
            if [ -z "$contentDocumentId" ]; then
              echo "Error: Failed to retrieve ContentDocumentId. No ContentDocumentId found."
              exit 1
            fi
            echo "ContentDocumentId: $contentDocumentId"
          else
            echo "No graph analysis report generated, skipping upload."
          fi
        env:
          SF_ACCESS_TOKEN: ${{ secrets.SF_ACCESS_TOKEN }}
        shell: bash

      - name: Send Email with actions-send-mail
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: 'smtp.gmail.com'
          server_port: '587'
          username: ${{ secrets.GMAIL_EMAIL }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          from: ${{ secrets.GMAIL_EMAIL }}
          subject: 'Graph-Based Code Analysis Report'
          body: 'Please find the attached Graph-Based Code Analysis Report.'
          to: ${{ env.PUSHER_EMAIL }}, ${{ secrets.GMAIL_EMAIL }}
          attachments: graph-analysis-report.csv