on:
  push:
    branches: "**"

jobs:
  installcli:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install CLI
        run: npm install @salesforce/cli --global

      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner

      - name: Verify SFDX CLI Installation
        run: sf --version

      - name: Verify SFDX Scanner Plugin Installation
        run: sf plugins --core

      - name: Get changed files and lines
        id: get-changes
        run: |
          # Check if the repository is shallow and unshallow if necessary
          if [ "$(git rev-parse --is-shallow-repository)" = "true" ]; then
            echo "Repository is shallow, unshallowing..."
            git fetch --unshallow
          else
            echo "Repository is not shallow, skipping unshallow."
          fi

          # Fetch the diff between the last two commits and capture only changes for .cls and .lwc files
          git diff --unified=0 HEAD~1 HEAD > changes.diff

          # Extract only changed .cls and .lwc files from the diff
          files=$(grep -E '^\+\+\+ b/.*(\.cls|\.lwc)$' changes.diff | sed 's/+++ b\///')

          if [ -z "$files" ]; then
            echo "No changed .cls or .lwc files detected."
            exit 0  # Gracefully exit if no relevant files are changed
          fi

          # Loop through each file and extract changed lines with line numbers
          while IFS= read -r file; do
            echo "Processing file: $file"

            # Extract the diff block associated with the current file
            file_diff=$(awk "/^\+\+\+ b\/$file\$/,/^diff/" changes.diff | grep -v '^diff')

            # Extract changed lines and corresponding line numbers
            echo "$file_diff" | grep -n '^+' | grep -v '+++' | while read -r line; do
              line_number=$(echo "$line" | cut -d: -f1)
              changed_line=$(echo "$line" | cut -d: -f2- | sed 's/^[+ ]//')

              # Display the line number and the changed line
              echo "Line $line_number: $changed_line"
            done

            # If no relevant changes were found in the file diff, log it
            if [ -z "$file_diff" ]; then
              echo "No relevant changes detected in $file."
            fi

          done <<< "$files"

      - name: Install mailx
        run: sudo apt-get install -y mailutils

      - name: Get Repository and Branch Info
        id: get-info
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          BRANCH_NAME=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          COMMIT_LABEL=$(git log -1 --pretty=format:'%s')
          FILE_TITLE="SFDX_Code_Scan_Delta_${REPO_NAME}_${BRANCH_NAME}_${COMMIT_LABEL}.csv"
          echo "FILE_TITLE=${FILE_TITLE}" >> $GITHUB_ENV

      - name: Upload Scanner Report and Rules as Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: SFDX_Code_Scan_Delta
          path: |
            scanner-report-*.csv

      - name: Get Pusher's Email
        id: get-pusher-email
        run: |
          COMMIT_SHA=${{ github.sha }}
          REPO=${{ github.repository }}
          PUSHER_EMAIL=$(curl -s -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            "https://api.github.com/repos/${REPO}/commits/${COMMIT_SHA}" | jq -r '.commit.committer.email')
          echo "PUSHER_EMAIL=${PUSHER_EMAIL}" >> $GITHUB_ENV

      - name: Encode CSV report to base64
        run: |
          report_file=$(find . -name "scanner-report-*.csv" | head -n 1)
          if [ -s "$report_file" ]; then
            base64 "$report_file" > encoded_report.txt
          else
            echo "No scanner report found."
            exit 0  # Gracefully exit if no report was found
          fi

      - name: Upload CSV Report to Salesforce
        if: success()
        run: |
          if [ -s encoded_report.txt ]; then
            # Read the base64 content from the file and escape special characters for JSON
            ENCODED_DATA=$(cat encoded_report.txt | tr -d '\n')
            # Upload the encoded report to Salesforce
            contentDocumentResponse=$(curl -X POST https://your-salesforce-instance.com/services/data/v61.0/sobjects/ContentVersion/ \
              -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{
                "Title": "'"${{ env.FILE_TITLE }}"'",
                "PathOnClient": "scanner-report.csv",
                "VersionData": "'"$ENCODED_DATA"'"
              }')
            echo "Response: $contentDocumentResponse"
            # Extract the ContentVersionId from the response
            contentVersionId=$(echo $contentDocumentResponse | jq -r '.id // empty')
            if [ -z "$contentVersionId" ]; then
              echo "Error: Failed to upload file. No ContentVersionId found."
              exit 1
            fi
            echo "ContentVersionId: $contentVersionId"
            # Get the ContentDocumentId
            contentDocumentResponse=$(curl -X GET https://your-salesforce-instance.com/services/data/v61.0/sobjects/ContentVersion/$contentVersionId \
              -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}")
            echo "ContentDocument Response: $contentDocumentResponse"
            contentDocumentId=$(echo $contentDocumentResponse | jq -r '.ContentDocumentId // empty')
            if [ -z "$contentDocumentId" ]; then
              echo "Error: Failed to retrieve ContentDocumentId. No ContentDocumentId found."
              exit 1
            fi
            echo "ContentDocumentId: $contentDocumentId"
          else
            echo "No encoded report found, skipping upload."
          fi
        env:
          SF_ACCESS_TOKEN: ${{ secrets.SF_ACCESS_TOKEN }}
