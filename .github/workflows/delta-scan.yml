name: SFDX Code Scan

on:
  pull_request:
    branches:
      - "**"

jobs:
  quality-gate-code-check:
    runs-on: ubuntu-latest
    outputs:
      scanner-report-path: ${{ steps.upload-report.outputs.artifact-path }}
      block-pr: ${{ steps.block-check.outputs.block-status }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install Salesforce CLI
        run: npm install @salesforce/cli --global

      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner

      - name: Verify Salesforce CLI Installation
        run: sf --version

      - name: Verify Scanner Plugin Installation
        run: sf plugins --core

      - name: Get uncommitted changed files and line numbers (for .cls and .lwc files)
        id: get-uncommitted-changes
        run: |
          # Get the list of uncommitted changed Apex (.cls) or LWC files
          changed_files=$(git diff --cached --name-only | grep -E '\.cls$|\.lwc$')

          # Check if there are any relevant changes
          if [ -z "$changed_files" ]; then
            echo "No relevant changes to scan."
            exit 0  # Gracefully exit if no relevant files are changed
          fi

          # Create a directory for temporary files
          temp_dir=$(mktemp -d)

          # Prepare the array to store uncommitted line numbers
          declare -a line_numbers_array=()

          # Loop through each changed file
          for file in $changed_files; do
            echo "Processing file: $file"
            
            # Get the uncommitted changed lines with line numbers
            git diff --cached --unified=0 "$file" > "$temp_dir/$file.diff"
            
            # Extract the changed line numbers
            awk '
              /^@@/ {split($0, arr, " "); start = substr(arr[2], 2); line_offset=0; next}  
              /^[+][^+]/ {print "Line", start + line_offset++, ":", substr($0, 2)}
            ' "$temp_dir/$file.diff" | grep -v '^+++' > "$temp_dir/$file.changed_lines"

            # Append the changed line numbers to the array
            changed_line_numbers=$(awk '{print $2}' "$temp_dir/$file.changed_lines")
            for line_number in $changed_line_numbers; do
              line_numbers_array+=("$line_number")
            done
          done

          # Output the line numbers
          echo "${line_numbers_array[*]}" > uncommitted_line_numbers.txt
          echo "Uncommitted line numbers: ${line_numbers_array[*]}"
          cat uncommitted_line_numbers.txt

      - name: Run SFDX Scanner on Changed Files and Lines
        run: |
          files=$(git diff --cached --name-only | grep -E '\.cls$|\.lwc$')
          if [ -z "$files" ]; then
            echo "No changed .cls or .lwc files detected."
            exit 0
          fi

          declare -a line_numbers_array=()

          while IFS= read -r file; do
            echo "Processing file: $file"
            file=$(echo "$file" | tr -d '"')
            changed_lines=$(git diff --cached --unified=0 "$file" | grep '^+' | grep -v '+++' | cut -d'+' -f2-)
            line_numbers=$(git diff --cached --unified=0 "$file" | grep '^@@' | awk '{print $2}' | cut -d',' -f1 | sed 's/-//')

            current_line_number=$(echo "$line_numbers" | head -1)
            echo "Starting line number: $current_line_number"

            while IFS= read -r line; do
              echo "Running SFDX Scanner on file: $file at line number: $current_line_number..."
              sf scanner:run --target "$file" --format "csv" --outfile "scanner-report.csv" || { echo "Scanner run failed or no issues found for $file, continuing with other files."; }
              line_numbers_array+=("$current_line_number")
              current_line_number=$((current_line_number + 1))
            done <<< "$changed_lines"
          done <<< "$files"

          echo "${line_numbers_array[*]}" > line_numbers.txt
          cat line_numbers.txt

      - name: Filter Scanner Report by Uncommitted Line Numbers
        run: |
          current_line_number_list=$(cat line_numbers.txt)
          current_line_number_list=$(echo $current_line_number_list | xargs)
          echo "Filtering scanner report for the following line numbers: $current_line_number_list"
          awk -v lines="$current_line_number_list" '
          BEGIN {
            FPAT = "([^,]+)|(\"[^\"]+\")";
            split(lines, arr, " ");
            for (i in arr) {
              valid[arr[i]] = 1;
            }
          }
          NR == 1 || (substr($4, 2, length($4)-2) in valid) {
            print $0;
          }
          ' scanner-report.csv > filtered-scanner-report.csv
          cat filtered-scanner-report.csv

      - name: Block PR merge if severity violations are found
        id: block-check
        run: |
          if [ -f filtered-scanner-report.csv ]; then
            severity_fail_count=$(awk -F',' '{gsub(/^ *| *$/, "", $2); if($2 == "\"3\"") count++} END {print count}' filtered-scanner-report.csv)
            echo "Severity 3 issues count: $severity_fail_count"
            if [ "$severity_fail_count" -gt 0 ]; then
              echo "Blocking your pull request due to severity 3 vulnerabilities found."
              echo "::set-output name=block-status::true"
              exit 1
            else
              echo "No severity 3 vulnerabilities found. Proceeding with Approval."
              echo "::set-output name=block-status::false"
            fi
          else
            echo "No filtered scanner report found."
            exit 1
          fi

      - name: Upload Filtered Scanner Report
        id: upload-report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: SFDX_Code_Scan_Report
          path: filtered-scanner-report.csv

  quality-gate-critical-permissions-check:
    runs-on: ubuntu-latest
    needs: quality-gate-code-check
    if: ${{ needs.quality-gate-code-check.outputs.block-pr == 'false' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Scanner Report
        uses: actions/download-artifact@v3
        with:
          name: SFDX_Code_Scan_Report

      - name: Scan Profiles and Permission Sets for Critical Permissions
        run: |
          CRITICAL_PERMISSIONS=(
              "AssignPermissionSets"
              "AuthorApex"
              "CustomizeApplication"
              "FreezeUsers"
              "ManageEncryptionKeys"
              "ManageInternalUsers"
              "ManagePasswordPolicies"
              "ManageProfilesPermissionSets"
              "ManageRoles"
              "ManageSharing"
              "ManageUsers"
              "ModifyAllData"
              "MonitorLoginHistory"
              "MultiFactorAuthenticationRequired"
              "PasswordNeverExpires"
              "ResetPasswordsUnlockUsers"
              "ViewAllData"
          )

          BLOCKED_FILES=()

          for FILE in $(find force-app/main/default/profiles -name '*.profile-meta.xml'); do
            for PERMISSION in "${CRITICAL_PERMISSIONS[@]}"; do
              if grep -q "$PERMISSION" "$FILE" && ! grep -q "System Administrator" "$FILE"; then
                BLOCKED_FILES+=("$FILE")
              fi
            done
          done

          for FILE in $(find force-app/main/default/permissionsets -name '*.permissionset-meta.xml'); do
            for PERMISSION in "${CRITICAL_PERMISSIONS[@]}"; do
              if grep -q "$PERMISSION" "$FILE"; then
                BLOCKED_FILES+=("$FILE")
              fi
            done
          done

          if [ ${#BLOCKED_FILES[@]} -gt 0 ]; then
            echo "Critical permissions found in the following files:"
            for FILE in "${BLOCKED_FILES[@]}"; do
              echo "$FILE"
            done
            exit 1
          else
            echo "No critical permissions assigned to non-System Administrator profiles or permission sets."
          fi
