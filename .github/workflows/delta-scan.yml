name: SFDX Code Scan Delta

on:
  push:
    branches:
      - "**"

jobs:
  installcli:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install CLI
        run: npm install @salesforce/cli --global

      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner

      - name: Verify SFDX CLI Installation
        run: sf --version

      - name: Verify SFDX Scanner Plugin Installation
        run: sf plugins --core

      - name: Get changed files and lines (for .cls and .lwc files)
        id: get-changes
        run: |
          # Check if the repository is shallow and unshallow if necessary
          if [ "$(git rev-parse --is-shallow-repository)" = "true" ]; then
            echo "Repository is shallow, unshallowing..."
            git fetch --unshallow
          else
            echo "Repository is not shallow, skipping unshallow."
          fi

          if [ "$(git rev-list --count HEAD)" -gt "1" ]; then
            echo "Fetching changed files and lines between HEAD~1 and HEAD"
            git diff --unified=0 HEAD~1 HEAD > changes.diff
          else
            echo "No previous commit to compare to." > changes.diff
          fi

          # Extract and print only the changed lines and line numbers from .cls and .lwc files
          echo "Processing changes for .cls and .lwc files only..."
          awk '
            BEGIN {valid_file=0} 
            /^diff --git/ {valid_file=0} 
            /\.cls$|\.lwc$/ {valid_file=1} 
            /^@@/ && valid_file {split($0, arr, " "); gsub(",", "", arr[2]); start = substr(arr[2], 2); line_offset=0; next}  
            /^[+][^+]/ && valid_file {print "Line", start + line_offset++, ":", substr($0, 2)}  
          ' changes.diff | grep -v '^+++' > changed_cls_lwc_lines.txt
          cat changed_cls_lwc_lines.txt

      - name: Run SFDX Scanner on Changed Files and Lines
        run: |
          files=$(grep -E '^\+\+\+ b/.*(\.cls|\.lwc)$' changes.diff | sed 's/+++ b\///')

          if [ -z "$files" ]; then
            echo "No changed .cls or .lwc files detected."
            exit 0
          fi

          # Declare an array to store the line numbers
          declare -a line_numbers_array=()

          while IFS= read -r file; do
            echo "Processing file: $file"
            file=$(echo "$file" | tr -d '"')
            changed_lines=$(grep -A 1000 "$file" changes.diff | grep '^\+' | sed 's/^+//')
            line_numbers=$(grep -A 1000 "$file" changes.diff | grep '^@@' | awk '{print $2}' | cut -d',' -f1 | sed 's/-//')

            echo "Changed lines in $file:"
            echo "$changed_lines"
            echo "Line numbers corresponding to the changed lines in $file:"
            echo "$line_numbers"

            current_line_number=$(echo "$line_numbers" | head -1)
            echo "Starting line number: $current_line_number"

            while IFS= read -r line; do
              echo "Mapping changed line: '$line' to original line number: $current_line_number"
              echo "Running SFDX Scanner on file: $file at line number: $current_line_number..."
              
              # Run the SFDX scanner
              sf scanner:run --target "$file" --format "csv" --outfile "scanner-report.csv" || {
                echo "No issues found or scanner failed for $file, skipping further processing."
                exit 0
              }

              # Store the current line number in the array
              line_numbers_array+=("$current_line_number")
              current_line_number=$((current_line_number + 1))
            done <<< "$changed_lines"

          done <<< "$files"

          echo "${line_numbers_array[*]}" > line_numbers.txt
          cat line_numbers.txt

      - name: Filter Scanner Report by Line Numbers
        run: |
          current_line_number_list=$(cat line_numbers.txt)
          current_line_number_list=$(echo $current_line_number_list | xargs)
          echo "Filtering scanner report for the following line numbers: $current_line_number_list"

          awk -v lines="$current_line_number_list" '
          BEGIN {
            FPAT = "([^,]+)|(\"[^\"]+\")";  
            split(lines, arr, " ");
            for (i in arr) {
              valid[arr[i]] = 1;  
            }
          }
          NR == 1 || (substr($4, 2, length($4)-2) in valid) {  
            print $0;  
          }
          ' scanner-report.csv > filtered-scanner-report.csv

          echo "Filtered scanner report:"
          cat filtered-scanner-report.csv

      - name: Install mailx
        run: sudo apt-get install -y mailutils

      - name: Get Repository and Branch Info
        id: get-info
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          BRANCH_NAME=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          COMMIT_LABEL=$(git log -1 --pretty=format:'%s')
          FILE_TITLE="Code Scanner Delta Report_${REPO_NAME}_${BRANCH_NAME}_${COMMIT_LABEL}"
          echo "FILE_TITLE=${FILE_TITLE}" >> $GITHUB_ENV

      - name: Upload Filtered Scanner Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.FILE_TITLE }}
          path: filtered-scanner-report.csv

      - name: Get Pusher's Email
        id: get-pusher-email
        run: |
          COMMIT_SHA=${{ github.sha }}
          REPO=${{ github.repository }}
          PUSHER_EMAIL=$(curl -s -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            "https://api.github.com/repos/${REPO}/commits/${COMMIT_SHA}" | jq -r '.commit.committer.email')
          echo "PUSHER_EMAIL=${PUSHER_EMAIL}" >> $GITHUB_ENV

      - name: Upload CSV Report to Salesforce
        run: |
          if [ -s filtered-scanner-report.csv ]; then
            contentDocumentResponse=$(curl -X POST https://your-salesforce-instance-url/services/data/v61.0/sobjects/ContentVersion/ \
              -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{
                "Title": "'"${{ env.FILE_TITLE }}"'",
                "PathOnClient": "filtered-scanner-report.csv",
                "VersionData": "'"$(cat filtered-scanner-report.csv)"'"
              }')
            echo "Response: $contentDocumentResponse"
          else
            echo "No scanner report generated, skipping upload."
          fi
        env:
          SF_ACCESS_TOKEN: ${{ secrets.SF_ACCESS_TOKEN }}

      - name: Send Email with actions-send-mail
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: "smtp.gmail.com"
          server_port: "587"
          username: ${{ secrets.GMAIL_EMAIL }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          from: ${{ secrets.GMAIL_EMAIL }}
          subject: "SFDX Code Scan Delta Report"
          body: "Please find the attached SFDX Code Scan Delta Report."
          to: ${{ env.PUSHER_EMAIL }}, ${{ secrets.GMAIL_EMAIL }}
          attachments: filtered-scanner-report.csv
