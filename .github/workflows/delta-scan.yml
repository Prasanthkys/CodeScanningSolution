name: SFDX Code Scan Delta

on:
  push:
    branches:
      - main
      - '**'

jobs:
  installcli:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install CLI
        run: npm install @salesforce/cli --global

      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner

      - name: Verify SFDX CLI Installation
        run: sf --version

      - name: Verify SFDX Scanner Plugin Installation
        run: sf plugins --core

      - name: Get Changed Files and Lines
        id: get-changed-lines
        run: |
          git fetch --unshallow || true
          if [ "$(git rev-list --count HEAD)" -gt "1" ]; then
            echo "Fetching changed files and lines between HEAD~1 and HEAD"
            git diff --unified=0 HEAD~1 HEAD > changes.diff
            # Extract the list of files changed
            grep '^diff --git' changes.diff | sed 's/^diff --git a\//\n/g' | sed 's/ b\//\n/g' | awk '{print $1}' | sort -u > changed_files.txt
          else
            echo "No previous commit to compare to." > changes.diff
            echo "No previous commit to compare to." > changed_files.txt
          fi
          cat changes.diff
          cat changed_files.txt

      - name: Apply Changes to Files
        id: apply-changes
        run: |
          mkdir -p modified_files
          while read -r file; do
            if [ -f "$file" ]; then
              cp "$file" "modified_files/$(basename $file)"
              grep -E '^@@ ' changes.diff | while read -r line; do
                if [[ "$line" == *"$(basename $file)"* ]]; then
                  start_line=$(echo $line | awk '{print $2}' | sed 's/^-\([0-9]*\).*/\1/')
                  end_line=$(echo $line | awk '{print $3}' | sed 's/^+\([0-9]*\).*/\1/')
                  sed -n "${start_line},${end_line}p" "modified_files/$(basename $file)" >> "modified_files/$(basename $file)"
                fi
              done
            fi
          done < changed_files.txt

      - name: Run SFDX Scanner on Modified Files
        if: success()
        run: |
          files=$(ls modified_files | grep -E '\.cls$|\.lwc$' || true)
          echo "Files to scan: $files"
          if [ -n "$files" ]; then
            sf scanner:run --target "modified_files/*" --format "csv" --outfile "scanner-report.csv" || { echo "Scanner run failed"; exit 1; }
          else
            echo "No relevant files changed."
            touch scanner-report.csv
          fi
        env:
          SF_LAZY_LOAD_MODULES: 'true'
          SF_AUTOUPDATE_DISABLE: 'true'
          SF_DISABLE_AUTOUPDATE: 'true'

      - name: Encode CSV file to Base64
        if: success()
        id: encode_file
        run: |
          if [ -f scanner-report.csv ]; then
            base64 scanner-report.csv | tr -d '\n' > encoded_report.txt
          else
            echo "Scanner report CSV file not found."
            exit 1
          fi

      - name: Install mailx
        run: sudo apt-get install -y mailutils

      - name: Get Repository and Branch Info
        id: get-info
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          BRANCH_NAME=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          COMMIT_LABEL=$(git log -1 --pretty=format:'%s')
          FILE_TITLE="Code Scanner Delta Report_${REPO_NAME}_${BRANCH_NAME}_${COMMIT_LABEL}"
          echo "FILE_TITLE=${FILE_TITLE}" >> $GITHUB_ENV

      - name: Upload Scanner Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.FILE_TITLE }}
          path: scanner-report.csv

      - name: Get Pusher's Email
        id: get-pusher-email
        run: |
          COMMIT_SHA=${{ github.sha }}
          REPO=${{ github.repository }}
          PUSHER_EMAIL=$(curl -s -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            "https://api.github.com/repos/${REPO}/commits/${COMMIT_SHA}" | jq -r '.commit.committer.email')
          echo "PUSHER_EMAIL=${PUSHER_EMAIL}" >> $GITHUB_ENV

      - name: Upload CSV Report to Salesforce
        if: success()
        run: |
          if [ -s encoded_report.txt ]; then
            contentDocumentResponse=$(curl -X POST https://individual-fc-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion/ \
              -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{
                "Title": "'"${{ env.FILE_TITLE }}"'",
                "PathOnClient": "scanner-report.csv",
                "VersionData": "'"$(cat encoded_report.txt)"'"
              }')
            echo "Response: $contentDocumentResponse"
            
            contentVersionId=$(echo $contentDocumentResponse | jq -r '.id // empty')
            if [ -z "$contentVersionId" ]; then
              echo "Error: Failed to upload file. No ContentVersionId found."
              exit 1
            fi
            echo "ContentVersionId: $contentVersionId"
            
            contentDocumentResponse=$(curl -X GET https://individual-fc-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion/$contentVersionId \
              -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}")
            echo "ContentDocument Response: $contentDocumentResponse"
            
            contentDocumentId=$(echo $contentDocumentResponse | jq -r '.ContentDocumentId // empty')
            if [ -z "$contentDocumentId" ]; then
              echo "Error: Failed to retrieve ContentDocumentId. No ContentDocumentId found."
              exit 1
            fi
            echo "ContentDocumentId: $contentDocumentId"
          else
            echo "No scanner report generated, skipping upload."
          fi
        env:
          SF_ACCESS_TOKEN: ${{ secrets.SF_ACCESS_TOKEN }}
        shell: bash

      - name: Send Email with actions-send-mail
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: 'smtp.gmail.com'
          server_port: '587'
          username: ${{ secrets.GMAIL_EMAIL }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          from: ${{ secrets.GMAIL_EMAIL }}
          subject: 'SFDX Code Scan Delta Report'
          body: 'Please find the attached SFDX Code Scan Delta Report.'
          to: ${{ env.PUSHER_EMAIL }}, ${{ secrets.GMAIL_EMAIL }}
          attachments: scanner-report.csv