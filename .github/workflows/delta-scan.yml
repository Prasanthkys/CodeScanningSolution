name: SFDX Code Scan Delta

on:
  pull_request:
    branches: "**"

jobs:
  installcli:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install CLI
        run: npm install @salesforce/cli --global

      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner

      - name: Verify SFDX CLI Installation
        run: sf --version

      - name: Verify SFDX Scanner Plugin Installation
        run: sf plugins --core

      - name: Get changed files and lines (for .cls and .lwc files)
        id: get-changes
        run: |
          # Check if the repository is shallow and unshallow if necessary
          if [ "$(git rev-parse --is-shallow-repository)" = "true" ]; then
            echo "Repository is shallow, unshallowing..."
            git fetch --unshallow
          else
            echo "Repository is not shallow, skipping unshallow."
          fi

          if [ "$(git rev-list --count HEAD)" -gt "1" ]; then
            echo "Fetching changed files and lines between HEAD~1 and HEAD"
            git diff --unified=0 HEAD~1 HEAD > changes.diff
          else
            echo "No previous commit to compare to." > changes.diff
          fi

          # Extract and print only the changed lines and line numbers from .cls and .lwc files
          echo "Processing changes for .cls and .lwc files only..."
          awk '
            BEGIN {valid_file=0} 
            /^diff --git/ {valid_file=0} 
            /\.cls$|\.lwc$/ {valid_file=1} 
            /^@@/ && valid_file {split($0, arr, " "); gsub(",", "", arr[2]); start = substr(arr[2], 2); next} 
            /^[+][^+]/ && valid_file {print "Line", start++, ":", $0}
          ' changes.diff > changed_cls_lwc_lines.txt
          cat changed_cls_lwc_lines.txt

      - name: Extract changed lines, create temp file, and scan
        if: success()
        run: |
          files=$(grep -E '^\+\+\+ b/.*(\.cls|\.lwc)$' changes.diff | sed 's/+++ b\///')

          if [ -z "$files" ]; then
            echo "No changed .cls or .lwc files detected."
            exit 0
          fi

          # Declare an array to map the line numbers
          declare -A line_map

          while IFS= read -r file; do
            echo "Processing file: $file"
            
            # Ensure that the file path doesn't contain unnecessary quotes
            file=$(echo "$file" | tr -d '"')
            
            # Extract the actual changed lines and line numbers for the specific file
            changed_lines=$(grep -A 1000 "$file" changes.diff | grep '^\+' | sed 's/^+//')
            line_numbers=$(grep -A 1000 "$file" changes.diff | grep '^@@' | awk '{print $2}' | cut -d',' -f1 | sed 's/-//')

            # Print the current changed line numbers and content
            echo "Changed line numbers in $file:"
            echo "$line_numbers"
            echo "Content of changed lines:"
            for line_number in $line_numbers; do
              # Use sed to extract the exact content of the changed line from the file
              current_line=$(sed -n "${line_number}p" "$file")
              echo "Line $line_number: $current_line"

              # Map the changed line for later processing
              line_map[$line_number]="$current_line"
            done

            # Create a unique output file path for the scanner report
            output_report="scanner-report-${file//\//_}.csv"
            echo "Running scanner on $file. Output report: $output_report"

            # Run the SFDX scanner on the actual file and specify the output file path
            sf scanner:run --target "$file" --format "csv" --outfile "$output_report" || { echo "Scanner run failed"; exit 1; }

            # Check if the scanner report was generated
            if [ -s "$output_report" ]; then
              echo "Scanner report generated: $output_report."

              # Prepare to filter the scanner report to include only the changed lines
              touch "updated-$output_report"  # Create an empty file for the filtered output
              i=0
              while IFS=, read -r problem severity file line column rule description url category engine; do
                # Ensure that both line numbers are treated as integers for comparison
                line_int=$(echo "$line" | tr -d '"')
                if [[ " ${line_numbers[@]} " =~ " ${line_int} " ]]; then
                  changed_line="${line_map[$line]}"  # Get the actual changed line content
                  # Append the line to the updated CSV (only include lines corresponding to changed lines)
                  echo "$problem,$severity,$file,$line,\"$changed_line\",$column,$rule,$description,$url,$category,$engine" >> "updated-$output_report"
                else
                  # Skip the row if it's not a changed line
                  echo "Skipping violation at line $line_int (not a changed line)."
                fi
              done < <(tail -n +2 "$output_report")  # Skip the header

              # Add the header for the updated CSV
              echo "Problem,Severity,File,Line,Changed Line,Column,Rule,Description,URL,Category,Engine" > "final-$output_report"
              cat "updated-$output_report" >> "final-$output_report"

              echo "Final report generated with only changed line violations: final-$output_report"

            else
              echo "Error: Scanner report not generated for $file."
              exit 1
            fi
            
            # Clean up
            rm "$output_report"
          done <<< "$files"

        env:
          SF_LAZY_LOAD_MODULES: "true"
          SF_AUTOUPDATE_DISABLE: "true"
          SF_DISABLE_AUTOUPDATE: "true"

      - name: Install mailx
        run: sudo apt-get install -y mailutils

      - name: Get Repository and Branch Info
        id: get-info
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          BRANCH_NAME=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          COMMIT_LABEL=$(git log -1 --pretty=format:'%s')
          FILE_TITLE="SFDX_Code_Scan_Delta_${REPO_NAME}_${BRANCH_NAME}_${COMMIT_LABEL}.csv"
          echo "FILE_TITLE=${FILE_TITLE}" >> $GITHUB_ENV

      - name: Upload Scanner Report and Rules as Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: SFDX_Code_Scan_Delta
          path: |
            final-scanner-report-*.csv

      - name: Get Pusher's Email
        id: get-pusher-email
        run: |
          COMMIT_SHA=${{ github.sha }}
          REPO=${{ github.repository }}
          PUSHER_EMAIL=$(curl -s -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            "https://api.github.com/repos/${REPO}/commits/${COMMIT_SHA}" | jq -r '.commit.committer.email')
          echo "PUSHER_EMAIL=${PUSHER_EMAIL}" >> $GITHUB_ENV

      - name: Encode CSV report to base64
        run: |
          report_file=$(find . -name "final-scanner-report-*.csv" | head -n 1)
          if [ -s "$report_file" ]; then
            base64 "$report_file" > encoded_report.txt
          else
            echo "No scanner report found."
            exit 0  # Gracefully exit if no report was found
          fi

      - name: Upload CSV Report to Salesforce
        if: success()
        run: |
          if [ -s encoded_report.txt ]; then
            # Read the base64 content from the file and escape special characters for JSON
            ENCODED_DATA=$(cat encoded_report.txt | tr -d '\n')
            
            # Upload the encoded report to Salesforce
            contentDocumentResponse=$(curl -X POST https://individual-fc-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion/ \
              -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{
                "Title": "'"${{ env.FILE_TITLE }}"'",
                "PathOnClient": "final-scanner-report.csv",
                "VersionData": "'"$ENCODED_DATA"'"
              }')
              
            echo "Response: $contentDocumentResponse"
              
            # Extract the ContentVersionId from the response
            contentVersionId=$(echo $contentDocumentResponse | jq -r '.id // empty')
            if [ -z "$contentVersionId" ]; then
              echo "Error: Failed to upload file. No ContentVersionId found."
              exit 1
            fi
            echo "ContentVersionId: $contentVersionId"
            
            # Get the ContentDocumentId
            contentDocumentResponse=$(curl -X GET https://individual-fc-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion/$contentVersionId \
              -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}")
            echo "ContentDocument Response: $contentDocumentResponse"
            
            contentDocumentId=$(echo $contentDocumentResponse | jq -r '.ContentDocumentId // empty')
            if [ -z "$contentDocumentId" ]; then
              echo "Error: Failed to retrieve ContentDocumentId. No ContentDocumentId found."
              exit 1
            fi
            echo "ContentDocumentId: $contentDocumentId"
          else
            echo "No encoded report found, skipping upload."
          fi
        env:
          SF_ACCESS_TOKEN: ${{ secrets.SF_ACCESS_TOKEN }}
