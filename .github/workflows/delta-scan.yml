on:
  push:
    branches:
      - '**'

jobs:
  # Job 1: Setup and Installations
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install Salesforce CLI
        run: |
          npm install @salesforce/cli --global
          echo "Verifying Salesforce CLI installation"
          sf --version

      - name: Install SFDX Scanner Plugin
        run: |
          sf plugins install @salesforce/sfdx-scanner
          sf plugins --core

      - name: Cache Installed CLI and Plugins
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: sfdx-cli-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            sfdx-cli-${{ runner.os }}

  # Job 2: Get Changes, Process, Run Scanner, and Upload Artifacts
  process-and-upload:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Restore Node Modules Cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: sfdx-cli-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            sfdx-cli-${{ runner.os }}

      - name: Verify Salesforce CLI Installation
        run: |
          echo "Verifying Salesforce CLI installation in Job 2"
          sf --version

      - name: Get changed files and lines
        id: get-changes
        run: |
          # Fetch changes if repository is shallow
          if [ "$(git rev-parse --is-shallow-repository)" = "true" ]; then
            git fetch --unshallow
          fi
          if [ "$(git rev-list --count HEAD)" -gt "1" ]; then
            git diff --unified=0 HEAD~1 HEAD > changes.diff
          else
            echo "No previous commit to compare to." > changes.diff
          fi
          cat changes.diff

      - name: Extract changed lines, create temp file, and scan
        run: |
          # Get changed files (cls and lwc only)
          files=$(grep -E '^\+\+\+ b/.*(\.cls|\.lwc)$' changes.diff | sed 's/+++ b\///')
          if [ -z "$files" ]; then
            echo "No changed .cls or .lwc files detected."
            exit 0
          fi
          # Loop through the files, extract changed lines, and create temp file for each
          while IFS= read -r file; do
            changed_lines=$(grep -A 1000 "$file" changes.diff | grep '^+' | grep -v '+++' | cut -d'+' -f2-)
            if [ -n "$changed_lines" ]; then
              temp_file="temp_${file//\//_}"
              echo "/* Temporary file for changed lines scan */" > "$temp_file"
              echo "public class TempWrapperClass {" >> "$temp_file"
              echo "    public static void tempMethod() {" >> "$temp_file"
              echo "$changed_lines" >> "$temp_file"
              echo "}" >> "$temp_file"
              echo "}" >> "$temp_file"
              # Run the SFDX scanner on the temporary file
              sf scanner:run --target "$temp_file" --format "csv" --outfile "scanner-report-$temp_file.csv"
              # Clean up the temporary file
              rm "$temp_file"
            fi
          done <<< "$files"

      - name: Upload Scanner Report and Rules as Artifacts
        uses: actions/upload-artifact@v3
        with:
            name: SFDX_Code_Scan_Delta
            path: |
              scanner-report-*.csv

  # Job 3: Email and Upload to Salesforce
  email-upload:
    runs-on: ubuntu-latest
    needs: process-and-upload
    steps:
      - name: Get Pusher's Email
        id: get-pusher-email
        run: |
          COMMIT_SHA=${{ github.sha }}
          REPO=${{ github.repository }}
          PUSHER_EMAIL=$(curl -s -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            "https://api.github.com/repos/${REPO}/commits/${COMMIT_SHA}" | jq -r '.commit.committer.email')
          echo "PUSHER_EMAIL=${PUSHER_EMAIL}" >> $GITHUB_ENV

      - name: Upload CSV Report to Salesforce
        run: |
          ENCODED_DATA=$(base64 scanner-report-*.csv)
          curl -X POST https://your-salesforce-instance.com/services/data/v61.0/sobjects/ContentVersion/ \
            -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "Title": "'"${{ env.FILE_TITLE }}"'",
              "VersionData": "'"$ENCODED_DATA"'"
            }'