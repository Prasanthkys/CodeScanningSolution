on:
  push:
    branches:
      "**"

jobs:
  installcli:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install CLI
        run: npm install @salesforce/cli --global

      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner

      - name: Verify SFDX CLI Installation
        run: sf --version

      - name: Verify SFDX Scanner Plugin Installation
        run: sf plugins --core

      - name: Get changed files and lines
        id: get-changes
        run: |
          git fetch --unshallow || true
          if [ "$(git rev-list --count HEAD)" -gt "1" ]; then
            echo "Fetching changed files and lines between HEAD~1 and HEAD"
            git diff --unified=0 HEAD~1 HEAD > changes.diff
          else:
            echo "No previous commit to compare to." > changes.diff
          cat changes.diff
          
      - name: Extract changed lines and scan
        if: success()
        run: |
          # Extract only the changed lines from the diff for .cls and .lwc files
          files=$(grep -E '^\+\+\+ b/.*(\.cls|\.lwc)$' changes.diff | sed 's/+++ b\///')
          while IFS= read -r file; do
            # Extract the line numbers for the changes
            lines=$(grep -n '^@@' changes.diff | grep "$file" | cut -d' ' -f2 | sed 's/+//; s/,.*//')
            
            # If there are changed lines, run the scanner on those lines
            if [ -n "$lines" ]; then
              echo "Running SFDX scanner on $file at lines $lines"
              sf scanner:run --target "$file" --format "csv" --outfile "scanner-report-$file.csv" || { echo "Scanner run failed"; exit 1; }
            else
              echo "No changes in relevant lines for $file."
            fi
          done <<< "$files"
        env:
          SF_LAZY_LOAD_MODULES: 'true'
          SF_AUTOUPDATE_DISABLE: 'true'
          SF_DISABLE_AUTOUPDATE: 'true'

      - name: Install mailx
        run: sudo apt-get install -y mailutils

      - name: Get Repository and Branch Info
        id: get-info
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          BRANCH_NAME=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          COMMIT_LABEL=$(git log -1 --pretty=format:'%s')
          FILE_TITLE="SFDX_Code_Scan_Delta_${REPO_NAME}_${BRANCH_NAME}_${COMMIT_LABEL}.csv"
          echo "FILE_TITLE=${FILE_TITLE}" >> $GITHUB_ENV

      - name: Upload Scanner Report and Rules as Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: SFDX_Code_Scan_Delta
          path: |
            scanner-report-*.csv

      - name: Get Pusher's Email
        id: get-pusher-email
        run: |
          COMMIT_SHA=${{ github.sha }}
          REPO=${{ github.repository }}
          PUSHER_EMAIL=$(curl -s -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            "https://api.github.com/repos/${REPO}/commits/${COMMIT_SHA}" | jq -r '.commit.committer.email')
          echo "PUSHER_EMAIL=${PUSHER_EMAIL}" >> $GITHUB_ENV

      - name: Encode CSV report to base64
        run: |
            if [ -s scanner-report.csv ]; then
              base64 scanner-report.csv > encoded_report.txt
            else
              echo "No scanner report found."
              exit 1
            fi

      - name: Upload CSV Report to Salesforce
        if: success()
        run: |
            if [ -s encoded_report.txt ]; then
              ENCODED_DATA=$(cat encoded_report.txt | tr -d '\n')
              contentDocumentResponse=$(curl -X POST https://your.salesforce.com/services/data/v61.0/sobjects/ContentVersion/ \
                -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d '{
                  "Title": "'"${{ env.FILE_TITLE }}"'",
                  "PathOnClient": "scanner-report.csv",
                  "VersionData": "'"$ENCODED_DATA"'"
                }')
                
              echo "Response: $contentDocumentResponse"
              contentVersionId=$(echo $contentDocumentResponse | jq -r '.id // empty')
              if [ -z "$contentVersionId" ]; then
                echo "Error: Failed to upload file. No ContentVersionId found."
                exit 1
              fi
              contentDocumentResponse=$(curl -X GET https://your.salesforce.com/services/data/v61.0/sobjects/ContentVersion/$contentVersionId \
                -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}")
              contentDocumentId=$(echo $contentDocumentResponse | jq -r '.ContentDocumentId // empty')
              if [ -z "$contentDocumentId" ]; then
                echo "Error: Failed to retrieve ContentDocumentId."
                exit 1
              fi
            else
              echo "No encoded report found, skipping upload."
            fi
        env:
            SF_ACCESS_TOKEN: ${{ secrets.SF_ACCESS_TOKEN }}