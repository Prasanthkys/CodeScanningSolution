name: SFDX Code Scan Delta

on:
  push:
    branches:
      "**"

jobs:
  installcli:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install CLI
        run: npm install @salesforce/cli --global

      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner

      - name: Verify SFDX CLI Installation
        run: sf --version

      - name: Verify SFDX Scanner Plugin Installation
        run: sf plugins --core

      - name: Get changed files and lines
        id: get-changes
        run: |
          # Check if the repository is shallow and unshallow if necessary
          if [ "$(git rev-parse --is-shallow-repository)" = "true" ]; then
            echo "Repository is shallow, unshallowing..."
            git fetch --unshallow
          else
            echo "Repository is not shallow, skipping unshallow."
          fi

          if [ "$(git rev-list --count HEAD)" -gt "1" ]; then
            echo "Fetching changed files and lines between HEAD~1 and HEAD"
            git diff --unified=0 HEAD~1 HEAD > changes.diff
          else
            echo "No previous commit to compare to." > changes.diff
          fi

          cat changes.diff

      - name: Extract changed lines with original file and line numbers
        if: success()
        run: |
            # Extract changed files with line numbers from the diff
            grep -nE '^(\+\+\+ b\/.*|@@)' changes.diff > extracted_changes.txt
            cat extracted_changes.txt

            # Extract only the files from the diff
            files=$(grep -E '^\+\+\+ b/.*(\.cls|\.lwc)$' changes.diff | sed 's/+++ b\///')

            if [ -z "$files" ]; then
              echo "No changed .cls or .lwc files detected."
              exit 0  # Gracefully exit if no relevant files are changed
            fi

            while IFS= read -r file; do
              echo "Processing file: $file"
              
              # Extract the line numbers of changed lines for the specific file
              line_numbers=$(grep -A 1000 "$file" extracted_changes.txt | grep -E '^@@' | awk '{print $2}' | sed 's/[^0-9]//g')

              if [ -n "$line_numbers" ]; then
                echo "Changed line numbers in $file:"
                echo "$line_numbers"
                
                # Run the SFDX scanner on the original file, focusing on the changed lines
                echo "Running SFDX scanner on $file for changed lines"
                sf scanner:run --target "$file" --format "csv" --outfile "scanner-report-$file.csv" || { echo "Scanner run failed"; exit 1; }
                
                # Filter the report for only the changed lines based on the extracted line numbers
                # You might need to post-process the CSV to filter only the relevant lines
                echo "Filtering scanner report for $file"
                awk -F, -v lines="$line_numbers" 'BEGIN {split(lines, arr, ",")} {for (i in arr) if ($2 == arr[i]) print $0}' "scanner-report-$file.csv" > "filtered-scanner-report-$file.csv"
              else
                echo "No relevant line changes detected in $file."
              fi
            done <<< "$files"
        env:
            SF_LAZY_LOAD_MODULES: 'true'
            SF_AUTOUPDATE_DISABLE: 'true'
            SF_DISABLE_AUTOUPDATE: 'true'

      - name: Upload Scanner Reports as Artifacts
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: SFDX_Temp_Scanner_Reports
          path: |
            filtered-scanner-report-*.csv

      - name: Install mailx
        run: sudo apt-get install -y mailutils

      - name: Get Repository and Branch Info
        id: get-info
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          BRANCH_NAME=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          COMMIT_LABEL=$(git log -1 --pretty=format:'%s')
          FILE_TITLE="SFDX_Code_Scan_Delta_${REPO_NAME}_${BRANCH_NAME}_${COMMIT_LABEL}.csv"
          echo "FILE_TITLE=${FILE_TITLE}" >> $GITHUB_ENV

      - name: Get Pusher's Email
        id: get-pusher-email
        run: |
          COMMIT_SHA=${{ github.sha }}
          REPO=${{ github.repository }}
          PUSHER_EMAIL=$(curl -s -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            "https://api.github.com/repos/${REPO}/commits/${COMMIT_SHA}" | jq -r '.commit.committer.email')
          echo "PUSHER_EMAIL=${PUSHER_EMAIL}" >> $GITHUB_ENV

      - name: Encode CSV report to base64
        run: |
            report_file=$(find . -name "filtered-scanner-report-*.csv" | head -n 1)
            if [ -s "$report_file" ]; then
              base64 "$report_file" > encoded_report.txt
            else
              echo "No scanner report found."
              exit 0  # Gracefully exit if no report was found
            fi

      - name: Upload CSV Report to Salesforce
        if: success()
        run: |
            if [ -s encoded_report.txt ]; then
              # Read the base64 content from the file and escape special characters for JSON
              ENCODED_DATA=$(cat encoded_report.txt | tr -d '\n')
              
              # Upload the encoded report to Salesforce
              contentDocumentResponse=$(curl -X POST https://yourInstance.salesforce.com/services/data/v61.0/sobjects/ContentVersion/ \
                -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d '{
                  "Title": "'"${{ env.FILE_TITLE }}"'",
                  "PathOnClient": "scanner-report.csv",
                  "VersionData": "'"$ENCODED_DATA"'"
                }')
                
              echo "Response: $contentDocumentResponse"
              
              # Extract the ContentVersionId from the response
              contentVersionId=$(echo $contentDocumentResponse | jq -r '.id // empty')
              if [ -z "$contentVersionId" ]; then
                echo "Error: Failed to upload file. No ContentVersionId found."
                exit 1
              fi
              echo "ContentVersionId: $contentVersionId"
              
              # Get the ContentDocumentId
              contentDocumentResponse=$(curl -X GET https://yourInstance.salesforce.com/services/data/v61.0/sobjects/ContentVersion/$contentVersionId \
                -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}")
              echo "ContentDocument Response: $contentDocumentResponse"
              
              contentDocumentId=$(echo $contentDocumentResponse | jq -r '.ContentDocumentId // empty')
              if [ -z "$contentDocumentId" ]; then
                echo "Error: Failed to retrieve ContentDocumentId. No ContentDocumentId found."
                exit 1
              fi
              echo "ContentDocumentId: $contentDocumentId"
            else
              echo "No encoded report found, skipping upload."
            fi
        env:
            SF_ACCESS_TOKEN: ${{ secrets.SF_ACCESS_TOKEN }}