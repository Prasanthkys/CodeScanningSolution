on:
  pull_request:
    branches:
      - "**"

jobs:
  quality-gate-code-check:
    runs-on: ubuntu-latest
    outputs:
      scanner-report-path: ${{ steps.upload-report.outputs.artifact-path }}
      block-pr: ${{ steps.block-check.outputs.block-status }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install Salesforce CLI
        run: npm install @salesforce/cli --global

      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner

      - name: Verify Salesforce CLI Installation
        run: sf --version

      - name: Verify Scanner Plugin Installation
        run: sf plugins --core

      - name: Get changed files and lines (for .cls and .lwc files)
        id: get-changes
        run: |
          git fetch --unshallow || true
          if [ "$(git rev-list --count HEAD)" -gt "1" ]; then
            echo "Fetching changed files and lines between HEAD~1 and HEAD"
            git diff --unified=0 HEAD~1 HEAD > changes.diff || { echo "Failed to get git diff"; exit 1; }
          else
            echo "No previous commit to compare to." > changes.diff
          fi

          if [ ! -s changes.diff ]; then
            echo "No changes detected between HEAD~1 and HEAD."
            exit 0
          fi

          echo "Processing changes for .cls and .lwc files only..."
          awk '
            BEGIN {valid_file=0} 
            /^diff --git/ {valid_file=0} 
            /\.cls$|\.lwc$/ {valid_file=1} 
            /^@@/ && valid_file {split($0, arr, " "); gsub(",", "", arr[2]); start = substr(arr[2], 2); line_offset=0; next}  
            /^[+][^+]/ && valid_file {print "Line", start + line_offset++, ":", substr($0, 2)}  
          ' changes.diff | grep -v '^+++' > changed_cls_lwc_lines.txt

          if [ ! -s changed_cls_lwc_lines.txt ]; then
            echo "No changes detected in .cls or .lwc files."
            exit 0
          fi

          cat changed_cls_lwc_lines.txt

      - name: Run SFDX Scanner on Changed Lines
        run: |
          files=$(grep -E '^\+\+\+ b/.*(\.cls|\.lwc)$' changes.diff | sed 's/+++ b\///')
          if [ -z "$files" ]; then
            echo "No changed .cls or .lwc files detected."
            exit 0
          fi

          while IFS= read -r file; do
            echo "Processing file: $file"

            # Extract the actual changed lines for the specific file
            changed_lines=$(grep -A 1000 "$file" changes.diff | grep '^\+' | sed 's/^+//')

            if [ -n "$changed_lines" ]; then
              # Create a temporary file with a valid method structure
              temp_file="temp_${file//\//_}"
              echo "/* Temporary file for changed lines scan */" > "$temp_file"
              echo "public class TempWrapperClass {" >> "$temp_file"
              echo "    public static void tempMethod() {" >> "$temp_file"
              echo "        /* Begin of extracted changed lines */" >> "$temp_file"
              echo "$changed_lines" >> "$temp_file"
              echo "        /* End of extracted changed lines */" >> "$temp_file"
              echo "    }" >> "$temp_file"
              
              # Ensure the method and class are closed properly
              open_braces=$(echo "$changed_lines" | grep -o '{' | wc -l)
              close_braces=$(echo "$changed_lines" | grep -o '}' | wc -l)
              if [ "$open_braces" -gt "$close_braces" ]; then
                remaining_closing_braces=$(($open_braces - $close_braces))
                for i in $(seq 1 $remaining_closing_braces); do
                  echo "}" >> "$temp_file"
                done
              fi
              echo "}" >> "$temp_file"  # Close the class

              echo "Created temporary file with method structure: $temp_file"

              # Run the SFDX scanner on the temporary file
              echo "Running SFDX scanner on temporary file $temp_file"
              sf scanner:run --target "$temp_file" --format "csv" --outfile "scanner-report-$temp_file.csv" || { echo "Scanner run failed"; exit 1; }

              # Check if the scanner report was generated
              if [ -s "scanner-report-$temp_file.csv" ]; then
                echo "Scanner report generated for $temp_file."

                # Trim the file paths in the 'File' column of the generated report
                sed -i 's|/home/runner/work/CodeScanningSolution/CodeScanningSolution/temp_force-app_main_default_classes_||g' "scanner-report-$temp_file.csv"
                echo "File paths trimmed in scanner-report-$temp_file.csv."
              else
                echo "No scanner report generated for $temp_file."
                exit 0  # Exit gracefully if no report was generated
              fi

              # Clean up the temporary file after scanning
              rm "$temp_file"
            else
              echo "No relevant changes detected in $file."
            fi
          done <<< "$files"

      - name: Block PR merge if severity violations are found
        id: block-check
        run: |
          if [ -f scanner-report.csv ]; then
            severity_fail_count=$(awk -F',' '{gsub(/^ *| *$/, "", $2); if($2 == "\"3\"") count++} END {print count}' scanner-report.csv)
            echo "Severity 3 issues count: $severity_fail_count"
            if [ "$severity_fail_count" -gt 0 ]; then
              echo "Blocking your pull request due to severity 3 vulnerabilities found."
              echo "::set-output name=block-status::true"
              exit 1
            else
              echo "No severity 3 vulnerabilities found. Proceeding with Approval."
              echo "::set-output name=block-status::false"
            fi
          else
            echo "No scanner report found."
            exit 1
          fi

      - name: Upload Filtered Scanner Report
        id: upload-report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: SFDX_Code_Scan_Report
          path: scanner-report.csv

  quality-gate-critical-permissions-check:
    runs-on: ubuntu-latest
    needs: quality-gate-code-check
    if: ${{ needs.quality-gate-code-check.outputs.block-pr == 'false' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Scanner Report
        uses: actions/download-artifact@v3
        with:
          name: SFDX_Code_Scan_Report

      - name: Scan Profiles and Permission Sets for Critical Permissions
        run: |
          CRITICAL_PERMISSIONS=( 
              "AssignPermissionSets"
              "AuthorApex"
              "CustomizeApplication"
              "FreezeUsers"
              "ManageEncryptionKeys"
              "ManageInternalUsers"
              "ManagePasswordPolicies"
              "ManageProfilesPermissionSets"
              "ManageRoles"
              "ManageSharing"
              "ManageUsers"
              "ModifyAllData"
              "MonitorLoginHistory"
              "MultiFactorAuthenticationRequired"
              "PasswordNeverExpires"
              "ResetPasswordsUnlockUsers"
              "ViewAllData"
          )

          BLOCKED_FILES=()

          for FILE in $(find force-app/main/default/profiles -name '*.profile-meta.xml'); do
            for PERMISSION in "${CRITICAL_PERMISSIONS[@]}"; do
              if grep -q "$PERMISSION" "$FILE" && ! grep -q "System Administrator" "$FILE"; then
                BLOCKED_FILES+=("$FILE")
              fi
            done
          done

          for FILE in $(find force-app/main/default/permissionsets -name '*.permissionset-meta.xml'); do
            for PERMISSION in "${CRITICAL_PERMISSIONS[@]}"; do
              if grep -q "$PERMISSION" "$FILE"; then
                BLOCKED_FILES+=("$FILE")
              fi
            done
          done

          if [ ${#BLOCKED_FILES[@]} -gt 0 ]; then
            echo "Critical permissions found in the following files:"
            for FILE in "${BLOCKED_FILES[@]}"; do
              echo "$FILE"
            done
            exit 1
          else
            echo "No critical permissions assigned to non-System Administrator profiles or permission sets."
          fi
