name: SFDX Code Scan Workflow

on:
  pull_request:
    branches:
      - "**"

jobs:
  installcli:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install CLI
        run: npm install @salesforce/cli --global

      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner

      - name: Verify SFDX CLI Installation
        run: sf --version

      - name: Verify SFDX Scanner Plugin Installation
        run: sf plugins --core

      - name: Get changed files and lines
        id: get-changes
        run: |
          if [ "$(git rev-parse --is-shallow-repository)" = "true" ]; then
            git fetch --unshallow
          else
            echo "Repository is not shallow, skipping unshallow."
          fi

          if [ "$(git rev-list --count HEAD)" -gt "1" ]; then
            git diff --unified=0 HEAD~1 HEAD > changes.diff
          else
            echo "No previous commit to compare to." > changes.diff
          fi

      - name: Extract changed lines, create temp file, and scan
        if: success()
        run: |
          files=$(grep -E '^\+\+\+ b/.*(\.cls|\.lwc)$' changes.diff | sed 's/+++ b\///')

          if [ -z "$files" ]; then
            echo "No changed .cls or .lwc files detected."
            exit 0
          fi

          while IFS= read -r file; do
            changed_lines=$(grep -A 1000 "$file" changes.diff | grep '^+' | grep -v '+++' | cut -d'+' -f2-)
            if [ -n "$changed_lines" ]; then
              temp_file="temp_${file//\//_}"
              echo "/* Temporary file for changed lines scan */" > "$temp_file"
              echo "public class TempWrapperClass {" >> "$temp_file"
              echo "    public static void tempMethod() {" >> "$temp_file"
              echo "$changed_lines" >> "$temp_file"
              echo "    }" >> "$temp_file"
              sf scanner:run --target "$temp_file" --format "csv" --outfile "scanner-report-$temp_file.csv"
              rm "$temp_file"
            fi
          done <<< "$files"

      - name: Block PR merge if severity violations are found
        id: block-check
        run: |
          if [ -f scanner-report-*.csv ]; then
            severity_fail_count=$(awk -F',' '{gsub(/^ *| *$/, "", $2); if($2 == "\"3\"") count++} END {print count}' scanner-report-*.csv)
            if [ "$severity_fail_count" -gt 0 ]; then
              echo "Blocking pull request due to severity 3 vulnerabilities found."
              exit 1
            fi
          fi

      - name: Upload Filtered Scanner Report
        id: upload-report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: SFDX_Code_Scan_Report
          path: scanner-report-*.csv

  quality-gate-critical-permissions-check:
    runs-on: ubuntu-latest
    needs: installcli
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Scanner Report
        uses: actions/download-artifact@v3
        with:
          name: SFDX_Code_Scan_Report

      - name: Scan Profiles and Permission Sets for Critical Permissions
        run: |
          CRITICAL_PERMISSIONS=(
              "AssignPermissionSets"
              "AuthorApex"
              "CustomizeApplication"
              "FreezeUsers"
              "ManageEncryptionKeys"
              "ManageInternalUsers"
              "ManagePasswordPolicies"
              "ManageProfilesPermissionSets"
              "ManageRoles"
              "ManageSharing"
              "ManageUsers"
              "ModifyAllData"
              "MonitorLoginHistory"
              "MultiFactorAuthenticationRequired"
              "PasswordNeverExpires"
              "ResetPasswordsUnlockUsers"
              "ViewAllData"
          )

          BLOCKED_FILES=()

          for FILE in $(find force-app/main/default/profiles -name '*.profile-meta.xml'); do
            for PERMISSION in "${CRITICAL_PERMISSIONS[@]}"; do
              if grep -q "$PERMISSION" "$FILE" && ! grep -q "System Administrator" "$FILE"; then
                BLOCKED_FILES+=("$FILE")
              fi
            done
          done

          for FILE in $(find force-app/main/default/permissionsets -name '*.permissionset-meta.xml'); do
            for PERMISSION in "${CRITICAL_PERMISSIONS[@]}"; do
              if grep -q "$PERMISSION" "$FILE"; then
                BLOCKED_FILES+=("$FILE")
              fi
            done
          done

          if [ ${#BLOCKED_FILES[@]} -gt 0 ]; then
            echo "Critical permissions found in the following files:"
            for FILE in "${BLOCKED_FILES[@]}"; do
              echo "$FILE"
            done
            exit 1
          fi
