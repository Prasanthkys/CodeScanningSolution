on:
  push:
    branches:
      "**"

jobs:
  installcli:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install CLI
        run: npm install @salesforce/cli --global

      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner

      - name: Verify SFDX CLI Installation
        run: sf --version

      - name: Verify SFDX Scanner Plugin Installation
        run: sf plugins --core

  get_changes:
    runs-on: ubuntu-latest
    needs: installcli
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed files and lines
        id: get-changes
        run: |
          if [ "$(git rev-parse --is-shallow-repository)" = "true" ]; then
            git fetch --unshallow
          fi
          if [ "$(git rev-list --count HEAD)" -gt "1" ]; then
            git diff --unified=0 HEAD~1 HEAD > changes.diff
          else
            echo "No previous commit to compare to." > changes.diff
          fi
          cat changes.diff

  scan_changes:
    runs-on: ubuntu-latest
    needs: get_changes
    steps:
      - name: Extract changed lines, create temp file, and scan
        run: |
            files=$(grep -E '^\+\+\+ b/.*(\.cls|\.lwc)$' changes.diff | sed 's/+++ b\///')
            if [ -z "$files" ]; then
              exit 0
            fi
            while IFS= read -r file; do
              changed_lines=$(grep -A 1000 "$file" changes.diff | grep '^+' | grep -v '+++' | cut -d'+' -f2-)
              changed_line_numbers=$(grep -n '^+' changes.diff | grep "$file" | cut -d':' -f1)
              if [ -n "$changed_lines" ]; then
                temp_file="temp_${file//\//_}.cls"
                echo "public class TempWrapperClass { public static void tempMethod() { $changed_lines }}" > "$temp_file"
                open_braces=$(echo "$changed_lines" | grep -o '{' | wc -l)
                close_braces=$(echo "$changed_lines" | grep -o '}' | wc -l)
                if [ "$open_braces" -gt "$close_braces" ]; then
                  remaining_closing_braces=$(($open_braces - $close_braces))
                  for i in $(seq 1 $remaining_closing_braces); do
                    echo "}" >> "$temp_file"
                  done
                fi
                sf scanner:run --target "$temp_file" --format "csv" --outfile "scanner-report-$temp_file.csv" || exit 1
                sed -i 's|/home/runner/work/CodeScanningSolution/CodeScanningSolution/temp_||g' "scanner-report-$temp_file.csv"
                awk -v line_numbers="$changed_line_numbers" -v file_name="$file" '
                BEGIN { split(line_numbers, ln_arr, "\n"); line_index = 1 }
                BEGIN { FS=OFS="," }
                NR==1 { print }
                NR>1 {
                  $3 = file_name
                  $4 = ln_arr[line_index++]
                  print
                }' "scanner-report-$temp_file.csv" > "scanner-report-modified-$temp_file.csv"
                mv "scanner-report-modified-$temp_file.csv" "scanner-report-$temp_file.csv"
                rm "$temp_file"
              fi
            done <<< "$files"

  upload_artifact:
    runs-on: ubuntu-latest
    needs: scan_changes
    steps:
      - name: Upload Scanner Report and Rules as Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: SFDX_Code_Scan_Delta
          path: scanner-report-*.csv

  email_report:
    runs-on: ubuntu-latest
    needs: upload_artifact
    steps:
      - name: Install mailx
        run: sudo apt-get install -y mailutils

      - name: Get Pusher's Email
        id: get-pusher-email
        run: |
          COMMIT_SHA=${{ github.sha }}
          REPO=${{ github.repository }}
          PUSHER_EMAIL=$(curl -s -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            "https://api.github.com/repos/${REPO}/commits/${COMMIT_SHA}" | jq -r '.commit.committer.email')
          echo "PUSHER_EMAIL=${PUSHER_EMAIL}" >> $GITHUB_ENV

      - name: Encode CSV report to base64
        run: |
            report_file=$(find . -name "scanner-report-*.csv" | head -n 1)
            if [ -s "$report_file" ]; then
              base64 "$report_file" > encoded_report.txt
            else
              exit 0
            fi

  upload_to_salesforce:
    runs-on: ubuntu-latest
    needs: email_report
    steps:
      - name: Upload CSV Report to Salesforce
        if: success()
        run: |
            if [ -s encoded_report.txt ]; then
              ENCODED_DATA=$(cat encoded_report.txt | tr -d '\n')
              contentDocumentResponse=$(curl -X POST https://individual-fc-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion/ \
                -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d '{
                  "Title": "'"${{ env.FILE_TITLE }}"'",
                  "PathOnClient": "scanner-report.csv",
                  "VersionData": "'"$ENCODED_DATA"'"
                }')
              echo "Response: $contentDocumentResponse"
              contentVersionId=$(echo $contentDocumentResponse | jq -r '.id // empty')
              contentDocumentResponse=$(curl -X GET https://individual-fc-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion/$contentVersionId \
                -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}")
              contentDocumentId=$(echo $contentDocumentResponse | jq -r '.ContentDocumentId // empty')
              if [ -z "$contentDocumentId" ]; then
                exit 1
              fi
            fi