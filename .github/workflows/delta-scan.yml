on:
  push:
    branches: "**"

jobs:
  installcli:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install CLI
        run: npm install @salesforce/cli --global

      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner

      - name: Verify SFDX CLI Installation
        run: sf --version

      - name: Verify SFDX Scanner Plugin Installation
        run: sf plugins --core

      - name: Get changed files and lines
        id: get-changes
        run: |
          # Check if the repository is shallow and unshallow if necessary
          if [ "$(git rev-parse --is-shallow-repository)" = "true" ]; then
            echo "Repository is shallow, unshallowing..."
            git fetch --unshallow
          else
            echo "Repository is not shallow, skipping unshallow."
          fi

          if [ "$(git rev-list --count HEAD)" -gt "1" ]; then
            echo "Fetching changed files and lines between HEAD~1 and HEAD"
            git diff --unified=0 HEAD~1 HEAD > changes.diff
          else
            echo "No previous commit to compare to." > changes.diff
          fi

          cat changes.diff

      - name: Extract changed lines, store line number in variable, and scan
        if: success()
        run: |
          # Extract only the changed files from the diff for .cls and .lwc files
          files=$(grep -E '^\+\+\+ b/.*(\.cls|\.lwc)$' changes.diff | sed 's/+++ b\///')

          if [ -z "$files" ]; then
            echo "No changed .cls or .lwc files detected."
            exit 0  # Gracefully exit if no relevant files are changed
          fi

          while IFS= read -r file; do
            echo "Processing file: $file"
            
            # Extract the actual changed lines and line numbers
            changed_lines=$(grep -n '^+' changes.diff | grep -A 1000 "$file" | grep '^+' | grep -v '+++' | sed 's/^+//')

            if [ -n "$changed_lines" ]; then
              echo "Changed lines in $file:"
              echo "$changed_lines"
              
              # Extract the line number of the change from the @@ line
              line_number=$(grep -A 1 "$file" changes.diff | grep '^@@' | awk '{print $2}' | cut -d',' -f1 | sed 's/-//')
              
              echo "The changed line number is: $line_number"
              
              # Create a temporary file with changed lines and line numbers
              temp_file="temp_changes_${file//\//_}.txt"
              echo "File: $file" > "$temp_file"
              echo "Changed line number: $line_number" >> "$temp_file"
              echo "Changed lines:" >> "$temp_file"
              echo "$changed_lines" >> "$temp_file"
              echo "Created temporary file with changed line number: $temp_file"
              
              # Print the content of the temp file
              cat "$temp_file"
              
              # Run the SFDX scanner on the full file
              echo "Running SFDX scanner on full file $file"
              sf scanner:run --target "$file" --format "csv" --outfile "scanner-report-$file.csv" || { echo "Scanner run failed"; exit 1; }
              
              # Check if the scanner report was generated
              if [ -s "scanner-report-$file.csv" ]; then
                echo "Scanner report generated for $file."
                
                # Trim the file paths in the 'File' column of the generated report
                echo "Trimming the file paths in scanner report: scanner-report-$file.csv"
                
                # Use sed to remove the specified path from the 'File' column
                sed -i 's|/home/runner/work/CodeScanningSolution/CodeScanningSolution/force-app/main/default/classes/||g' "scanner-report-$file.csv"
                
                echo "File paths trimmed in scanner-report-$file.csv."
              else
                echo "No scanner report generated for $file."
                exit 0  # Exit gracefully if no report was generated
              fi
              
              # Clean up the temporary file after scanning
              rm "$temp_file"
            else
              echo "No relevant changes detected in $file."
            fi
          done <<< "$files"
        env:
          SF_LAZY_LOAD_MODULES: "true"
          SF_AUTOUPDATE_DISABLE: "true"
          SF_DISABLE_AUTOUPDATE: "true"

      - name: Install mailx
        run: sudo apt-get install -y mailutils

      - name: Get Repository and Branch Info
        id: get-info
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          BRANCH_NAME=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          COMMIT_LABEL=$(git log -1 --pretty=format:'%s')
          FILE_TITLE="SFDX_Code_Scan_Delta_${REPO_NAME}_${BRANCH_NAME}_${COMMIT_LABEL}.csv"
          echo "FILE_TITLE=${FILE_TITLE}" >> $GITHUB_ENV

      - name: Upload Scanner Report and Rules as Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: SFDX_Code_Scan_Delta
          path: |
            scanner-report-*.csv
