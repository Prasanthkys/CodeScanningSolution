name: SFDX Code Scan Delta with Virtual Branch
 
on:
  push:
    branches:
      - '**'  # Capture all pushes
 
permissions:
  contents: write
  pull-requests: write
 
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code in detached state
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}  # Check out the original branch in detached state
          fetch-depth: 0  # Fetch all history for proper diff calculations
 
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
 
      - name: Install Salesforce CLI
        run: npm install @salesforce/cli --global
 
      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner
 
      - name: Verify SFDX CLI Installation
        run: sf --version
 
      - name: Verify SFDX Scanner Plugin Installation
        run: sf plugins --core
 
      - name: Get changed files
        id: get-changes
        run: |
          git fetch --unshallow || true
          if [ "$(git rev-list --count HEAD)" -gt "1" ]; then
            echo "Fetching changed files between HEAD~1 and HEAD"
            git diff --name-only HEAD~1 HEAD > changed_files.txt
          else
            echo "No previous commit to compare to." > changed_files.txt
          fi
          cat changed_files.txt
 
      - name: Run SFDX Scanner on Changed Files
        if: success()
        run: |
          files=$(cat changed_files.txt | grep -E '\.cls$|\.lwc$' || true)
          echo "Files to scan: $files"
          if [ -n "$files" ]; then
            sf scanner:run --target "$files" --format "csv" --outfile "scanner-report.csv" || { echo "Scanner run failed"; exit 1; }
          else
            echo "No relevant files changed."
            touch scanner-report.csv
          fi
        env:
          SF_LAZY_LOAD_MODULES: 'true'
          SF_AUTOUPDATE_DISABLE: 'true'
          SF_DISABLE_AUTOUPDATE: 'true'
 
      - name: Save scanner report as an artifact for next steps
        uses: actions/upload-artifact@v3
        with:
          name: scanner-report
          path: scanner-report.csv
 
  quality_gate:
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      quality_gate_status: ${{ steps.check_severity.outputs.quality_gate_status }}
    steps:
      - name: Download scanner report artifact
        uses: actions/download-artifact@v3
        with:
          name: scanner-report
 
      - name: Check Scanner Report Severity
        id: check_severity
        run: |
            if [ ! -f "scanner-report.csv" ]; then
              echo "::set-output name=quality_gate_status::FAILED"
              exit 1
            fi
            SEVERITY_FAIL_COUNT=$(awk -F',' '{gsub(/^ *| *$/, "", $2); if($2 == "\"3\"") count++} END {print count}' scanner-report.csv)
            SEVERITY_FAIL_COUNT=${SEVERITY_FAIL_COUNT:-0}
            if [ "$SEVERITY_FAIL_COUNT" -gt 0 ]; then
              echo "Quality gate failed due to high severity issues."
              echo "::set-output name=quality_gate_status::FAILED"
              exit 1
            else
              echo "::set-output name=quality_gate_status::PASSED"
 
  commit_and_push:
    runs-on: ubuntu-latest
    needs: quality_gate
    if: ${{ needs.quality_gate.outputs.quality_gate_status == 'PASSED' }}
    steps:
      - name: Checkout original branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}  # Checkout the original branch
 
      - name: Commit and push changes
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add .
          git commit -m "Committing changes after quality gate passed"
          git push origin ${{ github.ref }}