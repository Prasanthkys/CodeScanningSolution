name: SFDX Code Scan Delta

on:
  push:
    branches:
      - '**'  # Trigger workflow on any branch

jobs:
  installcli:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install CLI
        run: npm install @salesforce/cli --global

      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner

      - name: Verify SFDX CLI Installation
        run: sf --version

      - name: Verify SFDX Scanner Plugin Installation
        run: sf plugins --core

      - name: Get changed files and specific changes
        id: get-changes
        run: |
          # Check if there is more than one commit
          if [ "$(git rev-list --count HEAD)" -gt "1" ]; then
            echo "Fetching changed files between HEAD~1 and HEAD"
            git diff --name-only HEAD~1 HEAD > changed_files.txt

            # Extract specific changes in each file
            while read -r file; do
              if [ -f "$file" ]; then
                # Use git diff to get the specific lines that changed in the file
                git diff HEAD~1 HEAD "$file" > "${file//\//_}.diff"
              fi
            done < changed_files.txt
          else
            echo "No previous commit to compare to." > changed_files.txt
            echo "No specific changes found." > /dev/null
          fi
          cat changed_files.txt

      - name: Create Temporary Files with Changed Lines
        if: success()
        run: |
          while read -r file; do
            diff_file="${file//\//_}.diff"
            temp_file="temp_${file//\//_}"

            # Ensure the temporary file is created
            echo "Creating temporary file for $file"
            touch "$temp_file"

            # Process the diff file to extract only changed lines and write to temp file
            awk '/^\+[^+]/ {print substr($0, 2)}' "$diff_file" > "$temp_file"

            # Ensure the temp file exists and is not empty
            if [ ! -s "$temp_file" ]; then
              echo "No changes found in $file."
              rm "$temp_file"
            else
              echo "Temporary file created for $file."
            fi
          done < changed_files.txt

      - name: Run SFDX Scanner on Temporary Files
        if: success()
        run: |
          temp_files=$(ls temp_*)
          echo "Files to scan: $temp_files"

          if [ -n "$temp_files" ]; then
            # Run the scanner only on the temporary files
            sf scanner:run --target "$temp_files" --format "csv" --outfile "scanner-report.csv" || { echo "Scanner run failed"; exit 1; }
          else
            echo "No relevant files found for scanning."
            touch scanner-report.csv
          fi

      - name: Encode CSV file to Base64
        if: success()
        id: encode_file
        run: |
          if [ -f scanner-report.csv ]; then
            base64 scanner-report.csv | tr -d '\n' > encoded_report.txt
          else
            echo "Scanner report CSV file not found."
            exit 1
          fi

      - name: Upload CSV Report to Salesforce
        if: success()
        run: |
          if [ -s encoded_report.txt ]; then
            contentDocumentResponse=$(curl -X POST https://individual-fc-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion/ \
              -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{
                "Title": "'"${{ env.FILE_TITLE }}"'",
                "PathOnClient": "scanner-report.csv",
                "VersionData": "'"$(cat encoded_report.txt)"'"
              }')
            echo "Response: $contentDocumentResponse"

            contentVersionId=$(echo $contentDocumentResponse | jq -r '.id // empty')
            if [ -z "$contentVersionId" ]; then
              echo "Error: Failed to upload file. No ContentVersionId found."
              exit 1
            fi
            echo "ContentVersionId: $contentVersionId"

            contentDocumentResponse=$(curl -X GET https://individual-fc-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion/$contentVersionId \
              -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}")
            echo "ContentDocument Response: $contentDocumentResponse"

            contentDocumentId=$(echo $contentDocumentResponse | jq -r '.ContentDocumentId // empty')
            if [ -z "$contentDocumentId" ]; then
              echo "Error: Failed to retrieve ContentDocumentId. No ContentDocumentId found."
              exit 1
            fi
            echo "ContentDocumentId: $contentDocumentId"
          else
            echo "No scanner report generated, skipping upload."
          fi
        env:
          SF_ACCESS_TOKEN: ${{ secrets.SF_ACCESS_TOKEN }}