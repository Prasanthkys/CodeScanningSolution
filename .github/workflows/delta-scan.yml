
on:
  push:
    branches:
      "**"

jobs:
  installcli:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install CLI
        run: npm install @salesforce/cli --global

      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner

      - name: Verify SFDX CLI Installation
        run: sf --version

      - name: Verify SFDX Scanner Plugin Installation
        run: sf plugins --core

      - name: Get changed files and lines
        id: get-changes
        run: |
          # Check if the repository is shallow and unshallow if necessary
          if [ "$(git rev-parse --is-shallow-repository)" = "true" ]; then
            echo "Repository is shallow, unshallowing..."
            git fetch --unshallow
          else
            echo "Repository is not shallow, skipping unshallow."
          fi

          # Fetch the diff between the last two commits
          git diff --unified=0 HEAD~1 HEAD > changes.diff
          
          # Extract the file name and line numbers from the diff
          while IFS= read -r file; do
              echo "Processing file: $file"
          
              # Extract changed lines along with the line numbers
              grep -n '^@@ ' changes.diff | while read -r header; do
                  # Extract the line range information from the diff header
                  start_line=$(echo "$header" | sed -n 's/^@@ -\([0-9]\+\).*/\1/p')
                  # Add the start line number to changed lines
                  grep -n -A 1000 "^+++ b/$file" changes.diff | grep '^+' | grep -v '+++' | while read -r line; do
                      line_number=$((start_line))
                      echo "$line_number: $line"
                      start_line=$((start_line + 1))
                  done
              done
          
          done <<< "$(grep -E '^\+\+\+ b/.*(\.cls|\.lwc)$' changes.diff | sed 's/+++ b\///')"

          if [ "$(git rev-list --count HEAD)" -gt "1" ]; then
            echo "Fetching changed files and lines between HEAD~1 and HEAD"
            git diff --unified=0 HEAD~1 HEAD > changes.diff
          else
            echo "No previous commit to compare to." > changes.diff
          fi

          cat changes.diff

      - name: Extract changed lines, line numbers, create temp file, and scan
        if: success()
        run: |
            # Extract only the changed files from the diff for .cls and .lwc files
            files=$(grep -E '^\+\+\+ b/.*(\.cls|\.lwc)$' changes.diff | sed 's/+++ b\///')
            
            if [ -z "$files" ]; then
              echo "No changed .cls or .lwc files detected."
              exit 0  # Gracefully exit if no relevant files are changed
            fi

            while IFS= read -r file; do
              echo "Processing file: $file"

              # Extracting line numbers and changed lines from the diff
              awk '/^@@/ { split($4,a,","); line=a[1]; next } /^[+]/ { print line ": " $0; line++ }' changes.diff | grep -v '+++' > temp_changed_lines_with_numbers.txt

              if [ -s temp_changed_lines_with_numbers.txt ]; then
                temp_file="temp_${file//\//_}"
                echo "Extracting changed lines and line numbers..."

                # Begin writing the Apex class structure to the temp file
                echo "/* Temporary file for changed lines scan */" > "$temp_file"
                echo "public class TempWrapperClass {" >> "$temp_file"
                echo "    public static void tempMethod() {" >> "$temp_file"

                while IFS= read -r line; do
                  line_number=$(echo "$line" | cut -d':' -f1)
                  changed_line=$(echo "$line" | cut -d':' -f2- | sed 's/^[+ ]//')

                  # Print the line number and the corresponding changed line to the console
                  echo "Line $line_number: $changed_line"
                  
                  # Only include lines that are valid Apex statements
                  if [[ $changed_line == *";"* || $changed_line == *"{"* || $changed_line == *"}"* ]]; then
                    echo "// Line $line_number" >> "$temp_file"
                    echo "$changed_line" >> "$temp_file"
                  fi

                done < temp_changed_lines_with_numbers.txt

                # Close the method and class structure
                echo "    }" >> "$temp_file"
                echo "}" >> "$temp_file"

                echo "Changed lines with numbers added to temp file: $temp_file"
                
                # Check for unbalanced braces (ensure the method and class are closed properly)
                open_braces=$(grep -o '{' "$temp_file" | wc -l)
                close_braces=$(grep -o '}' "$temp_file" | wc -l)
                if [ "$open_braces" -gt "$close_braces" ]; then
                  remaining_closing_braces=$(($open_braces - $close_braces))
                  for i in $(seq 1 $remaining_closing_braces); do
                    echo "}" >> "$temp_file"
                  done
                fi

                # Run the SFDX scanner on the temporary file
                sf scanner:run --target "$temp_file" --format "csv" --outfile "scanner-report-${file//\//_}.csv" || { echo "Scanner run failed"; exit 1; }
                
                # Check if the scanner report was generated
                if [ -s "scanner-report-${file//\//_}.csv" ]; then
                  echo "Scanner report generated for $file."

                  # Optional: Adjust paths in the report or perform additional processing as needed

                else
                  echo "No scanner report generated for $file."
                fi

                # Clean up the temporary file after scanning
                rm "$temp_file"
              else
                echo "No relevant changes detected in $file."
              fi
            done <<< "$files"
        env:
            SF_LAZY_LOAD_MODULES: 'true'
            SF_AUTOUPDATE_DISABLE: 'true'
            SF_DISABLE_AUTOUPDATE: 'true'

      - name: Install mailx
        run: sudo apt-get install -y mailutils

      - name: Get Repository and Branch Info
        id: get-info
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          BRANCH_NAME=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          COMMIT_LABEL=$(git log -1 --pretty=format:'%s')
          FILE_TITLE="SFDX_Code_Scan_Delta_${REPO_NAME}_${BRANCH_NAME}_${COMMIT_LABEL}.csv"
          echo "FILE_TITLE=${FILE_TITLE}" >> $GITHUB_ENV

      - name: Upload Scanner Report and Rules as Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: SFDX_Code_Scan_Delta
          path: |
            scanner-report-*.csv

      - name: Get Pusher's Email
        id: get-pusher-email
        run: |
          COMMIT_SHA=${{ github.sha }}
          REPO=${{ github.repository }}
          PUSHER_EMAIL=$(curl -s -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            "https://api.github.com/repos/${REPO}/commits/${COMMIT_SHA}" | jq -r '.commit.committer.email')
          echo "PUSHER_EMAIL=${PUSHER_EMAIL}" >> $GITHUB_ENV

      - name: Encode CSV report to base64
        run: |
            report_file=$(find . -name "scanner-report-*.csv" | head -n 1)
            if [ -s "$report_file" ]; then
              base64 "$report_file" > encoded_report.txt
            else
              echo "No scanner report found."
              exit 0  # Gracefully exit if no report was found
            fi

      - name: Upload CSV Report to Salesforce
        if: success()
        run: |
            if [ -s encoded_report.txt ]; then
              # Read the base64 content from the file and escape special characters for JSON
              ENCODED_DATA=$(cat encoded_report.txt | tr -d '\n')
              
              # Upload the encoded report to Salesforce
              contentDocumentResponse=$(curl -X POST https://individual-fc-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion/ \
                -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d '{
                  "Title": "'"${{ env.FILE_TITLE }}"'",
                  "PathOnClient": "scanner-report.csv",
                  "VersionData": "'"$ENCODED_DATA"'"
                }')
                
              echo "Response: $contentDocumentResponse"
                
              # Extract the ContentVersionId from the response
              contentVersionId=$(echo $contentDocumentResponse | jq -r '.id // empty')
              if [ -z "$contentVersionId" ]; then
                echo "Error: Failed to upload file. No ContentVersionId found."
                exit 1
              fi
              echo "ContentVersionId: $contentVersionId"
              
              # Get the ContentDocumentId
              contentDocumentResponse=$(curl -X GET https://individual-fc-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion/$contentVersionId \
                -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}")
              echo "ContentDocument Response: $contentDocumentResponse"
              
              contentDocumentId=$(echo $contentDocumentResponse | jq -r '.ContentDocumentId // empty')
              if [ -z "$contentDocumentId" ]; then
                echo "Error: Failed to retrieve ContentDocumentId. No ContentDocumentId found."
                exit 1
              fi
              echo "ContentDocumentId: $contentDocumentId"
            else
              echo "No encoded report found, skipping upload."
            fi
        env:
            SF_ACCESS_TOKEN: ${{ secrets.SF_ACCESS_TOKEN }}