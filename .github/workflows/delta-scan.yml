name: SFDX Code Scan Delta

on:
  pull_request:
    branches: "**"

jobs:
  installcli:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install CLI
        run: npm install @salesforce/cli --global

      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner

      - name: Verify SFDX CLI Installation
        run: sf --version

      - name: Verify SFDX Scanner Plugin Installation
        run: sf plugins --core

      - name: Get changed files and lines (for .cls and .lwc files)
        id: get-changes
        run: |
          # Check if the repository is shallow and unshallow if necessary
          if [ "$(git rev-parse --is-shallow-repository)" = "true" ]; then
            echo "Repository is shallow, unshallowing..."
            git fetch --unshallow
          else
            echo "Repository is not shallow, skipping unshallow."
          fi

          if [ "$(git rev-list --count HEAD)" -gt "1" ]; then
            echo "Fetching changed files and lines between HEAD~1 and HEAD"
            git diff --unified=0 HEAD~1 HEAD > changes.diff
          else
            echo "No previous commit to compare to." > changes.diff
          fi

          # Extract and print only the changed lines and line numbers from .cls and .lwc files
          echo "Processing changes for .cls and .lwc files only..."
          awk '
            BEGIN {valid_file=0} 
            /^diff --git/ {valid_file=0} 
            /\.cls$|\.lwc$/ {valid_file=1} 
            /^@@/ && valid_file {split($0, arr, " "); gsub(",", "", arr[2]); start = substr(arr[2], 2); next} 
            /^[+][^+]/ && valid_file {print "Line", start++, ":", $0}
          ' changes.diff > changed_cls_lwc_lines.txt
          cat changed_cls_lwc_lines.txt

      - name: Extract changed lines, create temp file, and scan
        if: success()
        run: |
          # Fetch the list of changed .cls and .lwc files
          files=$(grep -E '^diff --git a/.*(\.cls|\.lwc)$' changes.diff | sed 's/diff --git a\///' | awk '{ print $1 }')

          if [ -z "$files" ]; then
            echo "No changed .cls or .lwc files detected."
            exit 0
          fi

          # Declare an array to map the line numbers
          declare -A line_map

          while IFS= read -r file; do
            echo "Processing file: $file"

            # Ensure that the file path doesn't contain unnecessary quotes
            file=$(echo "$file" | tr -d '"')

            # Extract the actual added or modified lines and line numbers for the specific file
            awk '
              /^@@/ { split($0, arr, " "); gsub(",", "", arr[2]); start = substr(arr[2], 2); next } 
              /^[+][^+]/ {print "Line " start++ ": " $0}' changes.diff > changed_cls_lwc_lines.txt

            # Populate the line_map array with changed line numbers
            awk '
              /^@@/ { split($0, arr, " "); gsub(",", "", arr[2]); start = substr(arr[2], 2); next } 
              /^[+][^+]/ { line_map[start++]=$0 }' changes.diff

            echo "Changed lines for $file have been mapped."

            # Create a temporary file with a valid Apex structure
            temp_file="temp_${file//\//_}"
            echo "/* Temporary file for changed lines scan */" > "$temp_file"
            echo "public class TempWrapperClass {" >> "$temp_file"
            echo "    public static void tempMethod() {" >> "$temp_file"

            # Append the changed lines to the temp file, ensuring each line ends with a semicolon and is valid Apex code
            grep '^[+][^+]' changes.diff | awk '{ line = $0; gsub("^[+]", "", line); if (!match(line, /;$/)) line = line ";"; print "        " line }' >> "$temp_file"

            echo "    }" >> "$temp_file"
            echo "}" >> "$temp_file"

            echo "Temporary file created with changed lines: $temp_file"

            # Run the SFDX scanner on the temporary file and generate a report
            sf scanner:run --target "$temp_file" --format "csv" --outfile "scanner-report-${file//\//_}.csv" || { echo "Scanner run failed"; exit 1; }

            # Check if the scanner report was generated
            if [ -s "scanner-report-${file//\//_}.csv" ]; then
              echo "Scanner report generated for $file."
              
              # Trim the file paths in the 'File' column of the generated report
              sed -i 's|/home/runner/work/CodeScanningSolution/CodeScanningSolution/temp_force-app_main_default_classes_||g' "scanner-report-${file//\//_}.csv"
              
              echo "File paths trimmed in scanner-report-${file//\//_}.csv."
              
              # Now match the violations with the corresponding original file line numbers
              i=0  # To track the position in the array
              updated_report="updated-scanner-report-${file//\//_}.csv"
              final_report="final-scanner-report-${file//\//_}.csv"

              # Create the updated report by mapping violations with changed line numbers
              while IFS=, read -r problem severity file line column rule description url category engine; do
                # Find the corresponding changed line number from the line_map
                if [ -n "${line_map[$line]}" ]; then
                  changed_line="${line_map[$line]}"
                else
                  changed_line="N/A"  # If no changed line found, set to N/A
                fi
                echo "$problem,$severity,$file,$line,$changed_line,$column,$rule,$description,$url,$category,$engine" >> "$updated_report"
                i=$((i + 1))
              done < <(tail -n +2 "scanner-report-${file//\//_}.csv") # Skip the header while reading the CSV

              # Add the header for the new CSV with the "Changed Line" column
              echo "Problem,Severity,File,Line,Changed Line,Column,Rule,Description,URL,Category,Engine" > "$final_report"
              cat "$updated_report" >> "$final_report"

              echo "Final report with original line numbers generated: $final_report"

            else
              echo "No scanner report generated for $file."
              exit 0  # Exit gracefully if no report was generated
            fi

            # Clean up the temporary files after scanning
            rm "$temp_file"
            rm "$updated_report"
          done <<< "$files"

        env:
          SF_LAZY_LOAD_MODULES: "true"
          SF_AUTOUPDATE_DISABLE: "true"
          SF_DISABLE_AUTOUPDATE: "true"

      - name: Install mailx
        run: sudo apt-get install -y mailutils

      - name: Get Repository and Branch Info
        id: get-info
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          BRANCH_NAME=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          COMMIT_LABEL=$(git log -1 --pretty=format:'%s')
          FILE_TITLE="SFDX_Code_Scan_Delta_${REPO_NAME}_${BRANCH_NAME}_${COMMIT_LABEL}.csv"
          echo "FILE_TITLE=${FILE_TITLE}" >> $GITHUB_ENV

      - name: Upload Scanner Report and Rules as Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: SFDX_Code_Scan_Delta
          path: |
            final-scanner-report-*.csv

      - name: Get Pusher's Email
        id: get-pusher-email
        run: |
          COMMIT_SHA=${{ github.sha }}
          REPO=${{ github.repository }}
          PUSHER_EMAIL=$(curl -s -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            "https://api.github.com/repos/${REPO}/commits/${COMMIT_SHA}" | jq -r '.commit.committer.email')
          echo "PUSHER_EMAIL=${PUSHER_EMAIL}" >> $GITHUB_ENV

      - name: Encode CSV report to base64
        run: |
          report_file=$(find . -name "final-scanner-report-*.csv" | head -n 1)
          if [ -s "$report_file" ]; then
            base64 "$report_file" > encoded_report.txt
          else
            echo "No scanner report found."
            exit 0  # Gracefully exit if no report was found
          fi

      - name: Upload CSV Report to Salesforce
        if: success()
        run: |
          if [ -s encoded_report.txt ]; then
            # Read the base64 content from the file and escape special characters for JSON
            ENCODED_DATA=$(cat encoded_report.txt | tr -d '\n')
            
            # Upload the encoded report to Salesforce
            contentDocumentResponse=$(curl -X POST https://individual-fc-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion/ \
              -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{
                "Title": "'"${{ env.FILE_TITLE }}"'",
                "PathOnClient": "final-scanner-report.csv",
                "VersionData": "'"$ENCODED_DATA"'"
              }')
              
            echo "Response: $contentDocumentResponse"
              
            # Extract the ContentVersionId from the response
            contentVersionId=$(echo $contentDocumentResponse | jq -r '.id // empty')
            if [ -z "$contentVersionId" ]; then
              echo "Error: Failed to upload file. No ContentVersionId found."
              exit 1
            fi
            echo "ContentVersionId: $contentVersionId"
            
            # Get the ContentDocumentId
            contentDocumentResponse=$(curl -X GET https://individual-fc-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion/$contentVersionId \
              -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}")
            echo "ContentDocument Response: $contentDocumentResponse"
            
            contentDocumentId=$(echo $contentDocumentResponse | jq -r '.ContentDocumentId // empty')
            if [ -z "$contentDocumentId" ]; then
              echo "Error: Failed to retrieve ContentDocumentId. No ContentDocumentId found."
              exit 1
            fi
            echo "ContentDocumentId: $contentDocumentId"
          else
            echo "No encoded report found, skipping upload."
          fi
        env:
          SF_ACCESS_TOKEN: ${{ secrets.SF_ACCESS_TOKEN }}
