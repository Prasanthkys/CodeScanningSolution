name: SFDX Code Scan Workflow

on:
  pull_request:
    branches:
      - "**"

jobs:
  set-up-installation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
      - name: Install Salesforce CLI
        run: npm install @salesforce/cli --global
      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner
      - name: Verify Salesforce CLI Installation
        run: sf --version
      - name: Verify Scanner Plugin Installation
        run: sf plugins --core

  analyze-changed-files:
    runs-on: ubuntu-latest
    needs: set-up-installation
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
      - name: Install Salesforce CLI
        run: npm install @salesforce/cli --global
      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner

      - name: Fetch Git History (Only if shallow)
        run: |
          depth=$(git rev-list --count HEAD)
          if [ "$depth" -eq 1 ]; then
            echo "Shallow repo detected, fetching complete history..."
            git fetch --unshallow
          else
            echo "Complete repo, skipping unshallowing..."
          fi

      - name: Get changed files and lines (for .cls and .lwc files)
        id: get-changes
        run: |
          if [ "$(git rev-list --count HEAD)" -gt "1" ]; then
            git diff --unified=0 HEAD~1 HEAD > changes.diff || { echo "Failed to get git diff"; exit 1; }
          else
            echo "No previous commit to compare to." > changes.diff
          fi

          if [ ! -s changes.diff ]; then
            echo "No changes detected between HEAD~1 and HEAD."
            exit 0
          fi

          echo "Processing changes for .cls and .lwc files only..."

          # Extract changed lines for .cls and .lwc files
          awk '
            BEGIN {valid_file=0}
            /^diff --git/ {valid_file=0}
            /\.cls$|\.lwc$/ {valid_file=1}
            /^@@/ && valid_file {
              split($0, arr, " ");
              gsub(",", "", arr[2]);
              start_line = substr(arr[2], 2);
              next;
            }
            /^[+][^+]/ && valid_file {
              line_num = start_line++;
              print "Line", line_num, ":", substr($0, 2);
            }
          ' changes.diff | grep -v '^+++' > changed_cls_lwc_lines.txt

          if [ ! -s changed_cls_lwc_lines.txt ]; then
            echo "No changes detected in .cls or .lwc files."
            exit 0
          fi

          cat changed_cls_lwc_lines.txt

      - name: Run SFDX Scanner once per changed file
        run: |
          files=$(grep -E '^\+\+\+ b/.*(\.cls|\.lwc)$' changes.diff | sed 's/+++ b\///')
          if [ -z "$files" ]; then
            echo "No changed .cls or .lwc files detected."
            exit 0
          fi

          # Run SFDX Scanner once per file
          for file in $files; do
            echo "Running SFDX Scanner on file: $file..."
            sf scanner:run --target "$file" --format "csv" --outfile "scanner-report.csv" || { echo "Scanner run failed or no issues found for $file, continuing with other files."; }
          done

      - name: Filter Scanner Report by Changed Lines
        run: |
          line_numbers_array=$(awk '{print $2}' changed_cls_lwc_lines.txt)
          echo "Filtering scanner report for the following line numbers: $line_numbers_array"

          # Filter the scanner report by the line numbers in changed_cls_lwc_lines.txt
          awk -v lines="$line_numbers_array" '
          BEGIN {
            FPAT = "([^,]+)|(\"[^\"]+\")";
            split(lines, arr, " ");
            for (i in arr) {
              valid[arr[i]] = 1;
            }
          }
          NR == 1 || (substr($4, 2, length($4)-2) in valid) {
            print $0;
          }
          ' scanner-report.csv > filtered-scanner-report.csv

          cat filtered-scanner-report.csv

      - name: Upload Filtered Scanner Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: filtered-scanner-report
          path: filtered-scanner-report.csv

  block-pr-if-vulnerabilities-found:
    runs-on: ubuntu-latest
    needs: analyze-changed-files
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
      - name: Install Salesforce CLI
        run: npm install @salesforce/cli --global
      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner
      - name: Download Filtered Scanner Report
        uses: actions/download-artifact@v3
        with:
          name: filtered-scanner-report
      - name: Block PR merge if severity violations are found
        id: block-check
        run: |
          if [ -f filtered-scanner-report.csv ]; then
            severity_fail_count=$(awk -F',' '{gsub(/^ *| *$/, "", $2); if($2 == "\"3\"") count++} END {print count}' filtered-scanner-report.csv)
            echo "Severity 3 issues count: $severity_fail_count"
            if [ "$severity_fail_count" -gt 0 ]; then
              echo "Blocking your pull request due to severity 3 vulnerabilities found."
              echo "block-status=true" >> $GITHUB_ENV
              exit 1
            else
              echo "No severity 3 vulnerabilities found. Proceeding with Approval."
              echo "block-status=false" >> $GITHUB_ENV
            fi
          else
            echo "No filtered scanner report found."
            exit 1
          fi

  uploading-the-artifact:
    runs-on: ubuntu-latest
    needs: [block-pr-if-vulnerabilities-found, analyze-changed-files] # This ensures it always runs after these jobs
    if: always() # Ensures the job runs even if previous jobs fail
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
      - name: Install Salesforce CLI
        run: npm install @salesforce/cli --global
      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner
      - name: Download Filtered Scanner Report
        uses: actions/download-artifact@v3
        with:
          name: filtered-scanner-report

      - name: Upload Filtered Scanner Report (Again)
        uses: actions/upload-artifact@v3
        with:
          name: SFDX_Code_Scan_Report
          path: filtered-scanner-report.csv

  quality-gate-critical-permissions-check:
    runs-on: ubuntu-latest
    needs: block-pr-if-vulnerabilities-found
    if: ${{ needs.quality-gate-code-check.outputs.block-pr == 'false' }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install Salesforce CLI
        run: npm install @salesforce/cli --global

      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner

      - name: Verify Salesforce CLI Installation
        run: sf --version

      - name: Verify Scanner Plugin Installation
        run: sf plugins --core

      - name: Download Scanner Report
        uses: actions/download-artifact@v3
        with:
          name: SFDX_Code_Scan_Report

      - name: Scan Profiles and Permission Sets for Critical Permissions
        run: |
          CRITICAL_PERMISSIONS=( "AssignPermissionSets" "AuthorApex" ... )
          # Add logic for scanning critical permissions
