on:
  push:
    branches:
      "**"

jobs:
  installcli:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install CLI
        run: npm install @salesforce/cli --global

      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner

      - name: Verify SFDX CLI Installation
        run: sf --version

      - name: Verify SFDX Scanner Plugin Installation
        run: sf plugins --core

  get_changes:
    runs-on: ubuntu-latest
    needs: installcli
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get changed files and lines
        id: get-changes
        run: |
          if [ "$(git rev-parse --is-shallow-repository)" = "true" ]; then
            git fetch --unshallow
          fi
          if [ "$(git rev-list --count HEAD)" -gt "1" ]; then
            git diff --unified=0 HEAD~1 HEAD > changes.diff
          else
            echo "No previous commit to compare to." > changes.diff
          fi
          cat changes.diff

      - name: Upload changes.diff as artifact
        uses: actions/upload-artifact@v3
        with:
          name: changes-diff
          path: changes.diff

  scan_changes:
    runs-on: ubuntu-latest
    needs: get_changes
    steps:
      - name: Install Salesforce CLI
        run: npm install @salesforce/cli --global

      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner

      - name: Download changes.diff artifact
        uses: actions/download-artifact@v3
        with:
          name: changes-diff

      - name: Extract changed lines, create temp file, and scan
        if: success()
        run: |
              files=$(grep -E '^\+\+\+ b/.*(\.cls|\.lwc)$' changes.diff | sed 's/+++ b\///')
              
              if [ -z "$files" ]; then
                echo "No changed .cls or .lwc files detected."
                exit 0
              fi
  
              while IFS= read -r file; do
                echo "Processing file: $file"
                
                changed_lines=$(grep -A 1000 "$file" changes.diff | grep '^+' | grep -v '+++' | cut -d'+' -f2-)
          
                if [ -n "$changed_lines" ]; then
                  temp_file="temp_${file//\//_}.cls"
                  echo "/* Temporary file for changed lines scan */" > "$temp_file"
                  echo "public class TempWrapperClass {" >> "$temp_file"
                  echo "    public static void tempMethod() {" >> "$temp_file"
                  echo "$changed_lines" >> "$temp_file"
                  echo "    }" >> "$temp_file"
                  echo "}" >> "$temp_file"
          
                  open_braces=$(echo "$changed_lines" | grep -o '{' | wc -l)
                  close_braces=$(echo "$changed_lines" | grep -o '}' | wc -l)
                  if [ "$open_braces" -gt "$close_braces" ]; then
                    remaining_closing_braces=$(($open_braces - $close_braces))
                    for i in $(seq 1 $remaining_closing_braces); do
                      echo "}" >> "$temp_file"
                    done
                  fi
          
                  sf scanner:run --target "$temp_file" --format "csv" --outfile "scanner-report-$temp_file.csv" || { echo "Scanner run failed"; exit 1; }

                  if [ -s "scanner-report-$temp_file.csv" ]; then
                    sed -i 's|/home/runner/work/CodeScanningSolution/CodeScanningSolution/temp_force-app_main_default_classes_||g' "scanner-report-$temp_file.csv"
                  fi
                  
                  rm "$temp_file"
                fi
              done <<< "$files"
      
      - name: Upload scanner report as artifact
        uses: actions/upload-artifact@v3
        with:
          name: scanner-report
          path: scanner-report-*.csv

  email_report:
    runs-on: ubuntu-latest
    needs: scan_changes
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download scanner report artifact
        uses: actions/download-artifact@v3
        with:
          name: scanner-report

      - name: Install mailx
        run: sudo apt-get install -y mailutils

      - name: Get Repository and Branch Info
        id: get-info
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          BRANCH_NAME=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          COMMIT_LABEL=$(git log -1 --pretty=format:'%s')
          FILE_TITLE="SFDX_Code_Scan_Delta_${REPO_NAME}_${BRANCH_NAME}_${COMMIT_LABEL}.csv"
          echo "FILE_TITLE=${FILE_TITLE}" >> $GITHUB_ENV

      - name: Get Pusher's Email
        id: get-pusher-email
        run: |
          COMMIT_SHA=${{ github.sha }}
          REPO=${{ github.repository }}
          PUSHER_EMAIL=$(curl -s -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            "https://api.github.com/repos/${REPO}/commits/${COMMIT_SHA}" | jq -r '.commit.committer.email')
          echo "PUSHER_EMAIL=${PUSHER_EMAIL}" >> $GITHUB_ENV

      - name: Encode CSV report to base64
        run: |
            report_file=$(find . -name "scanner-report-*.csv" | head -n 1)
            if [ -s "$report_file" ]; then
              base64 "$report_file" > encoded_report.txt
            else
              echo "No scanner report found."
              exit 1
            fi

      - name: Upload encoded report as artifact
        uses: actions/upload-artifact@v3
        with:
          name: encoded-report
          path: encoded_report.txt

  upload_to_salesforce:
    runs-on: ubuntu-latest
    needs: email_report
    steps:
      - name: Download encoded report artifact
        uses: actions/download-artifact@v3
        with:
          name: encoded-report

      - name: Upload CSV Report to Salesforce
        if: success()
        run: |
            if [ -s encoded_report.txt ]; then
              ENCODED_DATA=$(cat encoded_report.txt | tr -d '\n')
              
              contentDocumentResponse=$(curl -X POST https://individual-fc-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion/ \
                -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d '{
                  "Title": "'"${{ env.FILE_TITLE }}"'",
                  "PathOnClient": "scanner-report.csv",
                  "VersionData": "'"$ENCODED_DATA"'"
                }')
                
              echo "Response: $contentDocumentResponse"
              
              contentVersionId=$(echo $contentDocumentResponse | jq -r '.id // empty')
              if [ -z "$contentVersionId" ]; then
                echo "Error: Failed to upload file. No ContentVersionId found."
                exit 1
              fi
              echo "ContentVersionId: $contentVersionId"
              
              contentDocumentResponse=$(curl -X GET https://individual-fc-dev-ed.develop.my.salesforce.com/services/data/v61.0/sobjects/ContentVersion/$contentVersionId \
                -H "Authorization: Bearer ${{ secrets.SF_ACCESS_TOKEN }}")
              echo "ContentDocument Response: $contentDocumentResponse"
              
              contentDocumentId=$(echo $contentDocumentResponse | jq -r '.ContentDocumentId // empty')
              if [ -z "$contentDocumentId" ]; then
                echo "Error: Failed to retrieve ContentDocumentId. No ContentDocumentId found."
                exit 1
              fi
              echo "ContentDocumentId: $contentDocumentId"
            else
              echo "No encoded report found, skipping upload."
            fi
        env:
          SF_ACCESS_TOKEN: ${{ secrets.SF_ACCESS_TOKEN }}