diff --git a/.husky/pre-commit b/.husky/pre-commit
index 4433528..439f404 100644
--- a/.husky/pre-commit
+++ b/.husky/pre-commit
@@ -4,6 +4 @@
-# if git diff --name-only --cached | grep -q ".husky/pre-commit\|.husky/post-commit"; then
-#   echo "Error: pre-commit and post-commit files cannot be modified."
-#   exit 1
-# fi
-# chmod 544 .husky/pre-commit
-# chmod 544 .husky/post-commit
+# ...
@@ -12,8 +7 @@
-if ! command -v husky &> /dev/null
-then
-    echo "Husky is not installed. Installing Husky..."
-    npm install husky --save-dev
-    npx husky install
-else
-    echo "Husky is already installed successfully."
-fi
+# ...
@@ -36,6 +24,16 @@ git diff --unified=0 --cached > changes.diff
-# Loop through each changed file
-while IFS= read -r file; do
-  echo "Processing file: $file"
-
-  # Remove leading slashes to make it compatible with file path
-  clean_file=$(echo "$file" | sed 's#^\(\./\|/##')
+# Extract and print only the changed lines and line numbers from .cls and .lwc files
+echo "Processing changes for .cls and .lwc files only..."
+awk '
+  BEGIN {valid_file=0; file=""}
+  /^diff --git/ {valid_file=0}
+  /^diff --git a\/.* b\/(.*)/ {file=$3; sub(/^b\//,"",file)}
+  $0 ~ /\.cls$|\.lwc$/ {valid_file=1}
+  /^@@/ && valid_file {split($0, arr, " "); gsub(",", "", arr[2]); start = substr(arr[2], 2); line_offset=0; next}
+  /^[+][^+]/ && valid_file {print file, start + line_offset++, ":", substr($0, 2)}
+' changes.diff | grep -v '^+++' > changed_cls_lwc_lines.txt
+
+# Check if any relevant changes were found in .cls or .lwc files
+if [ ! -s changed_cls_lwc_lines.txt ]; then
+  echo "No changes detected in .cls or .lwc files."
+  exit 0
+fi
@@ -43,8 +41 @@ while IFS= read -r file; do
-  # Extract the changed lines and corresponding line numbers
-  awk '
-    BEGIN {valid_file=0} 
-    /^diff --git/ {valid_file=0} 
-    $0 ~ /\.cls$|\.lwc$/ {valid_file=1} 
-    /^@@/ && valid_file {split($0, arr, " "); gsub(",", "", arr[2]); start = substr(arr[2], 2); line_offset=0; next}  
-    /^[+][^+]/ && valid_file {print start + line_offset++, ":", substr($0, 2)}  
-  ' changes.diff | grep -v '^+++' > changed_cls_lwc_lines.txt
+cat changed_cls_lwc_lines.txt
@@ -52,5 +43,5 @@ while IFS= read -r file; do
-  # If no lines are found for this file, skip it
-  if [ ! -s changed_cls_lwc_lines.txt ]; then
-    echo "No changed lines found in $file"
-    continue
-  fi
+# Process each file
+for file in $changed_files; do
+  echo "Processing file: $file"
+  clean_file=$(basename "$file")
+  echo "Clean file: $clean_file"
@@ -70,2 +61,10 @@ while IFS= read -r file; do
-  # Read the changed lines from the file for filtering
-  changed_lines=$(cut -d':' -f1 changed_cls_lwc_lines.txt | tr '\n' ' ')
+  # Extract line numbers for this file
+  line_numbers=$(grep "^$file " changed_cls_lwc_lines.txt | cut -d':' -f1 | awk '{print $2}' | tr '\n' ' ')
+
+  if [ -z "$line_numbers" ]; then
+    echo "No changed lines found in $file"
+    continue
+  fi
+
+  # Generate the select expression for jq
+  select_expression=$(echo "$line_numbers" | awk '{for(i=1;i<=NF;i++) printf ".line == %s%s", $i, (i<NF ? " or " : "")}')
@@ -75,2 +74,2 @@ while IFS= read -r file; do
-  jq --argfile lines <(echo "$changed_lines" | jq -R . | jq -s .) '
-    .[] | select(.violations[]?.line as $line | $lines | index($line) != null)
+  jq '
+    .[] | .violations[]? | select('"$select_expression"')
@@ -87,2 +86 @@ while IFS= read -r file; do
-
-done <<< "$changed_files"
+done
@@ -101 +99 @@ jq -s '.' scanner-reports/filtered-scanner-report-*.json > scanner-reports/final
-severity_fail_count=$(jq '[.[].violations[]? | select(.severity == 3)] | length' scanner-reports/final-filtered-scanner-report.json)
+severity_fail_count=$(jq '[.[].severity | select(. == 3)] | length' scanner-reports/final-filtered-scanner-report.json)
diff --git a/changed_cls_lwc_lines.txt b/changed_cls_lwc_lines.txt
new file mode 100644
index 0000000..1210cb6
--- /dev/null
+++ b/changed_cls_lwc_lines.txt
@@ -0,0 +1,4 @@
+108 : index 14cff41..9a5148a 100644
+1119 : @@ -70 +70 @@ public with sharing class AccountInsertClass {
+1120 : -          System.debug('Hello Hi');
+70 :           System.debug('Hi');
diff --git a/changes.diff b/changes.diff
index 2bddfca..b1d3858 100644
--- a/changes.diff
+++ b/changes.diff
@@ -2 +2 @@ diff --git a/.husky/pre-commit b/.husky/pre-commit
-index 9b8d99e..d68baeb 100644
+index d68baeb..4433528 100644
@@ -5,3 +5,22 @@ index 9b8d99e..d68baeb 100644
-@@ -29,0 +30,3 @@ fi
-+# Create a directory for scanner reports if it doesn't exist
-+mkdir -p scanner-reports
+@@ -18 +18 @@ else
+-    echo "Husky is already installed Successfully."
++    echo "Husky is already installed successfully."
+@@ -43,10 +43,11 @@ while IFS= read -r file; do
+-  # Extract line numbers from the diff for this file
+-  changed_lines=$(awk -v file="$file" '
+-    BEGIN {inside=0}
+-    /^diff --git/ {inside=0}
+-    $0 ~ file {inside=1}
+-    inside && /^@@/ {split($0, arr, " "); gsub(",", "", arr[2]); start = substr(arr[2], 2); print start}
+-  ' changes.diff)
+-
+-  # If no line numbers were found for this file, skip it
+-  if [ -z "$changed_lines" ]; then
++  # Extract the changed lines and corresponding line numbers
++  awk '
++    BEGIN {valid_file=0} 
++    /^diff --git/ {valid_file=0} 
++    $0 ~ /\.cls$|\.lwc$/ {valid_file=1} 
++    /^@@/ && valid_file {split($0, arr, " "); gsub(",", "", arr[2]); start = substr(arr[2], 2); line_offset=0; next}  
++    /^[+][^+]/ && valid_file {print start + line_offset++, ":", substr($0, 2)}  
++  ' changes.diff | grep -v '^+++' > changed_cls_lwc_lines.txt
@@ -9,3 +28,5 @@ index 9b8d99e..d68baeb 100644
-@@ -36,0 +40,3 @@ while IFS= read -r file; do
-+  # Remove leading slashes to make it compatible with file path
-+  clean_file=$(echo "$file" | sed 's#^\(\./\|/##')
++  # If no lines are found for this file, skip it
++  if [ ! -s changed_cls_lwc_lines.txt ]; then
+@@ -68,0 +70,3 @@ while IFS= read -r file; do
++  # Read the changed lines from the file for filtering
++  changed_lines=$(cut -d':' -f1 changed_cls_lwc_lines.txt | tr '\n' ' ')
@@ -13,28 +33,0 @@ index 9b8d99e..d68baeb 100644
-@@ -50,0 +57,3 @@ while IFS= read -r file; do
-+  # Define the output path for the scanner report
-+  output_file="scanner-reports/scanner-report-${clean_file}.json"
-+
-@@ -52 +61 @@ while IFS= read -r file; do
--  sf scanner:run --target "$file" --format "json" --outfile "scanner-report-$file.json"
-+  sf scanner:run --target "$file" --format "json" --outfile "$output_file"
-@@ -55 +64 @@ while IFS= read -r file; do
--  if [ ! -f "scanner-report-$file.json" ]; then
-+  if [ ! -f "$output_file" ]; then
-@@ -64 +73 @@ while IFS= read -r file; do
--  ' "scanner-report-$file.json" > "filtered-scanner-report-$file.json"
-+  ' "$output_file" > "scanner-reports/filtered-scanner-report-${clean_file}.json"
-@@ -67 +76 @@ while IFS= read -r file; do
--  if [ ! -s "filtered-scanner-report-$file.json" ]; then
-+  if [ ! -s "scanner-reports/filtered-scanner-report-${clean_file}.json" ]; then
-@@ -73 +82 @@ while IFS= read -r file; do
--  cat "filtered-scanner-report-$file.json"
-+  cat "scanner-reports/filtered-scanner-report-${clean_file}.json"
-@@ -78 +87 @@ done <<< "$changed_files"
--filtered_reports=$(ls filtered-scanner-report-*.json 2> /dev/null)
-+filtered_reports=$(ls scanner-reports/filtered-scanner-report-*.json 2> /dev/null)
-@@ -85 +94 @@ fi
--jq -s '.' filtered-scanner-report-*.json > final-filtered-scanner-report.json
-+jq -s '.' scanner-reports/filtered-scanner-report-*.json > scanner-reports/final-filtered-scanner-report.json
-@@ -88 +97 @@ jq -s '.' filtered-scanner-report-*.json > final-filtered-scanner-report.json
--severity_fail_count=$(jq '[.[].violations[]? | select(.severity == 3)] | length' final-filtered-scanner-report.json)
-+severity_fail_count=$(jq '[.[].violations[]? | select(.severity == 3)] | length' scanner-reports/final-filtered-scanner-report.json)
@@ -42,3 +35,2 @@ diff --git a/changes.diff b/changes.diff
-new file mode 100644
-index 0000000..dd57583
---- /dev/null
+index dd57583..2bddfca 100644
+--- a/changes.diff
@@ -46,5 +38,3 @@ index 0000000..dd57583
-@@ -0,0 +1,119 @@
-+diff --git a/.husky/pre-commit b/.husky/pre-commit
-+new file mode 100644
-+index 0000000..9b8d99e
-+--- /dev/null
+@@ -1,0 +2,40 @@ diff --git a/.husky/pre-commit b/.husky/pre-commit
++index 9b8d99e..d68baeb 100644
++--- a/.husky/pre-commit
@@ -52,53 +42,3 @@ index 0000000..dd57583
-+@@ -0,0 +1,100 @@
-++#!/bin/bash
-++
-++# Prevent modification of Husky files
-++# if git diff --name-only --cached | grep -q ".husky/pre-commit\|.husky/post-commit"; then
-++#   echo "Error: pre-commit and post-commit files cannot be modified."
-++#   exit 1
-++# fi
-++# chmod 544 .husky/pre-commit
-++# chmod 544 .husky/post-commit
-++
-++# Check if Husky is installed
-++if ! command -v husky &> /dev/null
-++then
-++    echo "Husky is not installed. Installing Husky..."
-++    npm install husky --save-dev
-++    npx husky install
-++else
-++    echo "Husky is already installed Successfully."
-++fi
-++
-++# Get the list of changed Apex (.cls) or LWC files
-++changed_files=$(git diff --cached --name-only | grep -E '\.cls$|\.lwc$')
-++
-++# Check if there are any relevant changes
-++if [ -z "$changed_files" ]; then
-++  echo "No relevant changes to scan in the files."
-++  exit 0
-++fi
-++
-++# Extract the changed lines and corresponding line numbers from the diff for each file
-++git diff --unified=0 --cached > changes.diff
-++
-++# Loop through each changed file
-++while IFS= read -r file; do
-++  echo "Processing file: $file"
-++
-++  # Extract line numbers from the diff for this file
-++  changed_lines=$(awk -v file="$file" '
-++    BEGIN {inside=0}
-++    /^diff --git/ {inside=0}
-++    $0 ~ file {inside=1}
-++    inside && /^@@/ {split($0, arr, " "); gsub(",", "", arr[2]); start = substr(arr[2], 2); print start}
-++  ' changes.diff)
-++
-++  # If no line numbers were found for this file, skip it
-++  if [ -z "$changed_lines" ]; then
-++    echo "No changed lines found in $file"
-++    continue
-++  fi
-++
-++  # Run the SFDX scanner on the file and generate the report
-++  sf scanner:run --target "$file" --format "json" --outfile "scanner-report-$file.json"
++@@ -29,0 +30,3 @@ fi
+++# Create a directory for scanner reports if it doesn't exist
+++mkdir -p scanner-reports
@@ -106,5 +46,3 @@ index 0000000..dd57583
-++  # Ensure that the scanner report was generated
-++  if [ ! -f "scanner-report-$file.json" ]; then
-++    echo "Scanner report for $file not found."
-++    continue
-++  fi
++@@ -36,0 +40,3 @@ while IFS= read -r file; do
+++  # Remove leading slashes to make it compatible with file path
+++  clean_file=$(echo "$file" | sed 's#^\(\./\|/##')
@@ -112,5 +50,3 @@ index 0000000..dd57583
-++  # Filter the scanner report based on the changed lines
-++  echo "Filtering scanner report for $file by changed lines..."
-++  jq --argfile lines <(echo "$changed_lines" | jq -R . | jq -s .) '
-++    .[] | select(.violations[]?.line as $line | $lines | index($line) != null)
-++  ' "scanner-report-$file.json" > "filtered-scanner-report-$file.json"
++@@ -50,0 +57,3 @@ while IFS= read -r file; do
+++  # Define the output path for the scanner report
+++  output_file="scanner-reports/scanner-report-${clean_file}.json"
@@ -118,48 +54,268 @@ index 0000000..dd57583
-++  # If no filtered report is found, skip
-++  if [ ! -s "filtered-scanner-report-$file.json" ]; then
-++    echo "No issues found for the changed lines in $file"
-++    continue
-++  fi
-++
-++  echo "Filtered scanner report for $file:"
-++  cat "filtered-scanner-report-$file.json"
-++
-++done <<< "$changed_files"
-++
-++# Check if any filtered reports were generated
-++filtered_reports=$(ls filtered-scanner-report-*.json 2> /dev/null)
-++if [ -z "$filtered_reports" ]; then
-++  echo "No vulnerabilities found in the changed lines. Proceeding with commit."
-++  exit 0
-++fi
-++
-++# Combine all filtered reports into one final report
-++jq -s '.' filtered-scanner-report-*.json > final-filtered-scanner-report.json
-++
-++# Parse the final filtered scanner report and check for severity 3 issues
-++severity_fail_count=$(jq '[.[].violations[]? | select(.severity == 3)] | length' final-filtered-scanner-report.json)
-++
-++# Output the fail count for debugging
-++echo "Severity Fail Count: $severity_fail_count"
-++
-++# Block commit if there are severity 3 issues
-++if [ "$severity_fail_count" -gt 0 ]; then
-++  echo "Blocking your commit due to vulnerabilities found with severity 3."
-++  exit 1
-++else
-++  echo "No vulnerabilities found in changed lines. Proceeding with commit."
-++  exit 0
-++fi
-+diff --git a/force-app/main/default/classes/Account_Insert.cls b/force-app/main/default/classes/Account_Insert.cls
-+index 1e62ed4..14cff41 100644
-+--- a/force-app/main/default/classes/Account_Insert.cls
-++++ b/force-app/main/default/classes/Account_Insert.cls
-+@@ -69,0 +70 @@ public with sharing class AccountInsertClass {
-++          System.debug('Hello Hi');
-+diff --git a/scanner-report.json b/scanner-report.json
-+new file mode 100644
-+index 0000000..8a298a1
-+--- /dev/null
-++++ b/scanner-report.json
-+@@ -0,0 +1 @@
-++[{"engine":"pmd","fileName":"C:\\GitHub Folder\\CodeScanningSolution\\force-app\\main\\default\\classes\\Account_Insert.cls","violations":[{"line":20,"column":11,"endLine":20,"endColumn":35,"severity":3,"ruleName":"AvoidDebugStatements","category":"Performance","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_performance.html#avoiddebugstatements","message":"\r\nAvoid debug statements since they impact on performance\r\n"},{"line":20,"column":11,"endLine":20,"endColumn":35,"severity":3,"ruleName":"DebugsShouldUseLoggingLevel","category":"Best Practices","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_bestpractices.html#debugsshoulduselogginglevel","message":"\r\nCalls to System.debug should specify a logging level.\r\n"},{"line":70,"column":11,"endLine":70,"endColumn":32,"severity":3,"ruleName":"AvoidDebugStatements","category":"Performance","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_performance.html#avoiddebugstatements","message":"\r\nAvoid debug statements since they impact on performance\r\n"},{"line":70,"column":11,"endLine":70,"endColumn":32,"severity":3,"ruleName":"DebugsShouldUseLoggingLevel","category":"Best Practices","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_bestpractices.html#debugsshoulduselogginglevel","message":"\r\nCalls to System.debug should specify a logging level.\r\n"}]}]
++@@ -52 +61 @@ while IFS= read -r file; do
++-  sf scanner:run --target "$file" --format "json" --outfile "scanner-report-$file.json"
+++  sf scanner:run --target "$file" --format "json" --outfile "$output_file"
++@@ -55 +64 @@ while IFS= read -r file; do
++-  if [ ! -f "scanner-report-$file.json" ]; then
+++  if [ ! -f "$output_file" ]; then
++@@ -64 +73 @@ while IFS= read -r file; do
++-  ' "scanner-report-$file.json" > "filtered-scanner-report-$file.json"
+++  ' "$output_file" > "scanner-reports/filtered-scanner-report-${clean_file}.json"
++@@ -67 +76 @@ while IFS= read -r file; do
++-  if [ ! -s "filtered-scanner-report-$file.json" ]; then
+++  if [ ! -s "scanner-reports/filtered-scanner-report-${clean_file}.json" ]; then
++@@ -73 +82 @@ while IFS= read -r file; do
++-  cat "filtered-scanner-report-$file.json"
+++  cat "scanner-reports/filtered-scanner-report-${clean_file}.json"
++@@ -78 +87 @@ done <<< "$changed_files"
++-filtered_reports=$(ls filtered-scanner-report-*.json 2> /dev/null)
+++filtered_reports=$(ls scanner-reports/filtered-scanner-report-*.json 2> /dev/null)
++@@ -85 +94 @@ fi
++-jq -s '.' filtered-scanner-report-*.json > final-filtered-scanner-report.json
+++jq -s '.' scanner-reports/filtered-scanner-report-*.json > scanner-reports/final-filtered-scanner-report.json
++@@ -88 +97 @@ jq -s '.' filtered-scanner-report-*.json > final-filtered-scanner-report.json
++-severity_fail_count=$(jq '[.[].violations[]? | select(.severity == 3)] | length' final-filtered-scanner-report.json)
+++severity_fail_count=$(jq '[.[].violations[]? | select(.severity == 3)] | length' scanner-reports/final-filtered-scanner-report.json)
++diff --git a/changes.diff b/changes.diff
+@@ -3 +43 @@ new file mode 100644
+-index 0000000..9b8d99e
++index 0000000..dd57583
+@@ -5,102 +45,121 @@ index 0000000..9b8d99e
+-+++ b/.husky/pre-commit
+-@@ -0,0 +1,100 @@
+-+#!/bin/bash
+-+
+-+# Prevent modification of Husky files
+-+# if git diff --name-only --cached | grep -q ".husky/pre-commit\|.husky/post-commit"; then
+-+#   echo "Error: pre-commit and post-commit files cannot be modified."
+-+#   exit 1
+-+# fi
+-+# chmod 544 .husky/pre-commit
+-+# chmod 544 .husky/post-commit
+-+
+-+# Check if Husky is installed
+-+if ! command -v husky &> /dev/null
+-+then
+-+    echo "Husky is not installed. Installing Husky..."
+-+    npm install husky --save-dev
+-+    npx husky install
+-+else
+-+    echo "Husky is already installed Successfully."
+-+fi
+-+
+-+# Get the list of changed Apex (.cls) or LWC files
+-+changed_files=$(git diff --cached --name-only | grep -E '\.cls$|\.lwc$')
+-+
+-+# Check if there are any relevant changes
+-+if [ -z "$changed_files" ]; then
+-+  echo "No relevant changes to scan in the files."
+-+  exit 0
+-+fi
+-+
+-+# Extract the changed lines and corresponding line numbers from the diff for each file
+-+git diff --unified=0 --cached > changes.diff
+-+
+-+# Loop through each changed file
+-+while IFS= read -r file; do
+-+  echo "Processing file: $file"
+-+
+-+  # Extract line numbers from the diff for this file
+-+  changed_lines=$(awk -v file="$file" '
+-+    BEGIN {inside=0}
+-+    /^diff --git/ {inside=0}
+-+    $0 ~ file {inside=1}
+-+    inside && /^@@/ {split($0, arr, " "); gsub(",", "", arr[2]); start = substr(arr[2], 2); print start}
+-+  ' changes.diff)
+-+
+-+  # If no line numbers were found for this file, skip it
+-+  if [ -z "$changed_lines" ]; then
+-+    echo "No changed lines found in $file"
+-+    continue
+-+  fi
+-+
+-+  # Run the SFDX scanner on the file and generate the report
+-+  sf scanner:run --target "$file" --format "json" --outfile "scanner-report-$file.json"
+-+
+-+  # Ensure that the scanner report was generated
+-+  if [ ! -f "scanner-report-$file.json" ]; then
+-+    echo "Scanner report for $file not found."
+-+    continue
+-+  fi
+-+
+-+  # Filter the scanner report based on the changed lines
+-+  echo "Filtering scanner report for $file by changed lines..."
+-+  jq --argfile lines <(echo "$changed_lines" | jq -R . | jq -s .) '
+-+    .[] | select(.violations[]?.line as $line | $lines | index($line) != null)
+-+  ' "scanner-report-$file.json" > "filtered-scanner-report-$file.json"
+-+
+-+  # If no filtered report is found, skip
+-+  if [ ! -s "filtered-scanner-report-$file.json" ]; then
+-+    echo "No issues found for the changed lines in $file"
+-+    continue
+-+  fi
+-+
+-+  echo "Filtered scanner report for $file:"
+-+  cat "filtered-scanner-report-$file.json"
+-+
+-+done <<< "$changed_files"
+-+
+-+# Check if any filtered reports were generated
+-+filtered_reports=$(ls filtered-scanner-report-*.json 2> /dev/null)
+-+if [ -z "$filtered_reports" ]; then
+-+  echo "No vulnerabilities found in the changed lines. Proceeding with commit."
+-+  exit 0
+-+fi
+-+
+-+# Combine all filtered reports into one final report
+-+jq -s '.' filtered-scanner-report-*.json > final-filtered-scanner-report.json
+-+
+-+# Parse the final filtered scanner report and check for severity 3 issues
+-+severity_fail_count=$(jq '[.[].violations[]? | select(.severity == 3)] | length' final-filtered-scanner-report.json)
+-+
+-+# Output the fail count for debugging
+-+echo "Severity Fail Count: $severity_fail_count"
+-+
+-+# Block commit if there are severity 3 issues
+-+if [ "$severity_fail_count" -gt 0 ]; then
+-+  echo "Blocking your commit due to vulnerabilities found with severity 3."
+-+  exit 1
+-+else
+-+  echo "No vulnerabilities found in changed lines. Proceeding with commit."
+-+  exit 0
+-+fi
+++++ b/changes.diff
++@@ -0,0 +1,119 @@
+++diff --git a/.husky/pre-commit b/.husky/pre-commit
+++new file mode 100644
+++index 0000000..9b8d99e
+++--- /dev/null
++++++ b/.husky/pre-commit
+++@@ -0,0 +1,100 @@
++++#!/bin/bash
++++
++++# Prevent modification of Husky files
++++# if git diff --name-only --cached | grep -q ".husky/pre-commit\|.husky/post-commit"; then
++++#   echo "Error: pre-commit and post-commit files cannot be modified."
++++#   exit 1
++++# fi
++++# chmod 544 .husky/pre-commit
++++# chmod 544 .husky/post-commit
++++
++++# Check if Husky is installed
++++if ! command -v husky &> /dev/null
++++then
++++    echo "Husky is not installed. Installing Husky..."
++++    npm install husky --save-dev
++++    npx husky install
++++else
++++    echo "Husky is already installed Successfully."
++++fi
++++
++++# Get the list of changed Apex (.cls) or LWC files
++++changed_files=$(git diff --cached --name-only | grep -E '\.cls$|\.lwc$')
++++
++++# Check if there are any relevant changes
++++if [ -z "$changed_files" ]; then
++++  echo "No relevant changes to scan in the files."
++++  exit 0
++++fi
++++
++++# Extract the changed lines and corresponding line numbers from the diff for each file
++++git diff --unified=0 --cached > changes.diff
++++
++++# Loop through each changed file
++++while IFS= read -r file; do
++++  echo "Processing file: $file"
++++
++++  # Extract line numbers from the diff for this file
++++  changed_lines=$(awk -v file="$file" '
++++    BEGIN {inside=0}
++++    /^diff --git/ {inside=0}
++++    $0 ~ file {inside=1}
++++    inside && /^@@/ {split($0, arr, " "); gsub(",", "", arr[2]); start = substr(arr[2], 2); print start}
++++  ' changes.diff)
++++
++++  # If no line numbers were found for this file, skip it
++++  if [ -z "$changed_lines" ]; then
++++    echo "No changed lines found in $file"
++++    continue
++++  fi
++++
++++  # Run the SFDX scanner on the file and generate the report
++++  sf scanner:run --target "$file" --format "json" --outfile "scanner-report-$file.json"
++++
++++  # Ensure that the scanner report was generated
++++  if [ ! -f "scanner-report-$file.json" ]; then
++++    echo "Scanner report for $file not found."
++++    continue
++++  fi
++++
++++  # Filter the scanner report based on the changed lines
++++  echo "Filtering scanner report for $file by changed lines..."
++++  jq --argfile lines <(echo "$changed_lines" | jq -R . | jq -s .) '
++++    .[] | select(.violations[]?.line as $line | $lines | index($line) != null)
++++  ' "scanner-report-$file.json" > "filtered-scanner-report-$file.json"
++++
++++  # If no filtered report is found, skip
++++  if [ ! -s "filtered-scanner-report-$file.json" ]; then
++++    echo "No issues found for the changed lines in $file"
++++    continue
++++  fi
++++
++++  echo "Filtered scanner report for $file:"
++++  cat "filtered-scanner-report-$file.json"
++++
++++done <<< "$changed_files"
++++
++++# Check if any filtered reports were generated
++++filtered_reports=$(ls filtered-scanner-report-*.json 2> /dev/null)
++++if [ -z "$filtered_reports" ]; then
++++  echo "No vulnerabilities found in the changed lines. Proceeding with commit."
++++  exit 0
++++fi
++++
++++# Combine all filtered reports into one final report
++++jq -s '.' filtered-scanner-report-*.json > final-filtered-scanner-report.json
++++
++++# Parse the final filtered scanner report and check for severity 3 issues
++++severity_fail_count=$(jq '[.[].violations[]? | select(.severity == 3)] | length' final-filtered-scanner-report.json)
++++
++++# Output the fail count for debugging
++++echo "Severity Fail Count: $severity_fail_count"
++++
++++# Block commit if there are severity 3 issues
++++if [ "$severity_fail_count" -gt 0 ]; then
++++  echo "Blocking your commit due to vulnerabilities found with severity 3."
++++  exit 1
++++else
++++  echo "No vulnerabilities found in changed lines. Proceeding with commit."
++++  exit 0
++++fi
+++diff --git a/force-app/main/default/classes/Account_Insert.cls b/force-app/main/default/classes/Account_Insert.cls
+++index 1e62ed4..14cff41 100644
+++--- a/force-app/main/default/classes/Account_Insert.cls
++++++ b/force-app/main/default/classes/Account_Insert.cls
+++@@ -69,0 +70 @@ public with sharing class AccountInsertClass {
++++          System.debug('Hello Hi');
+++diff --git a/scanner-report.json b/scanner-report.json
+++new file mode 100644
+++index 0000000..8a298a1
+++--- /dev/null
++++++ b/scanner-report.json
+++@@ -0,0 +1 @@
++++[{"engine":"pmd","fileName":"C:\\GitHub Folder\\CodeScanningSolution\\force-app\\main\\default\\classes\\Account_Insert.cls","violations":[{"line":20,"column":11,"endLine":20,"endColumn":35,"severity":3,"ruleName":"AvoidDebugStatements","category":"Performance","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_performance.html#avoiddebugstatements","message":"\r\nAvoid debug statements since they impact on performance\r\n"},{"line":20,"column":11,"endLine":20,"endColumn":35,"severity":3,"ruleName":"DebugsShouldUseLoggingLevel","category":"Best Practices","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_bestpractices.html#debugsshoulduselogginglevel","message":"\r\nCalls to System.debug should specify a logging level.\r\n"},{"line":70,"column":11,"endLine":70,"endColumn":32,"severity":3,"ruleName":"AvoidDebugStatements","category":"Performance","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_performance.html#avoiddebugstatements","message":"\r\nAvoid debug statements since they impact on performance\r\n"},{"line":70,"column":11,"endLine":70,"endColumn":32,"severity":3,"ruleName":"DebugsShouldUseLoggingLevel","category":"Best Practices","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_bestpractices.html#debugsshoulduselogginglevel","message":"\r\nCalls to System.debug should specify a logging level.\r\n"}]}]
+@@ -108 +167 @@ diff --git a/force-app/main/default/classes/Account_Insert.cls b/force-app/main/
+-index 1e62ed4..14cff41 100644
++index 14cff41..9a5148a 100644
+@@ -111,9 +170,3 @@ index 1e62ed4..14cff41 100644
+-@@ -69,0 +70 @@ public with sharing class AccountInsertClass {
+-+          System.debug('Hello Hi');
+-diff --git a/scanner-report.json b/scanner-report.json
+-new file mode 100644
+-index 0000000..8a298a1
+---- /dev/null
+-+++ b/scanner-report.json
+-@@ -0,0 +1 @@
+-+[{"engine":"pmd","fileName":"C:\\GitHub Folder\\CodeScanningSolution\\force-app\\main\\default\\classes\\Account_Insert.cls","violations":[{"line":20,"column":11,"endLine":20,"endColumn":35,"severity":3,"ruleName":"AvoidDebugStatements","category":"Performance","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_performance.html#avoiddebugstatements","message":"\r\nAvoid debug statements since they impact on performance\r\n"},{"line":20,"column":11,"endLine":20,"endColumn":35,"severity":3,"ruleName":"DebugsShouldUseLoggingLevel","category":"Best Practices","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_bestpractices.html#debugsshoulduselogginglevel","message":"\r\nCalls to System.debug should specify a logging level.\r\n"},{"line":70,"column":11,"endLine":70,"endColumn":32,"severity":3,"ruleName":"AvoidDebugStatements","category":"Performance","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_performance.html#avoiddebugstatements","message":"\r\nAvoid debug statements since they impact on performance\r\n"},{"line":70,"column":11,"endLine":70,"endColumn":32,"severity":3,"ruleName":"DebugsShouldUseLoggingLevel","category":"Best Practices","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_bestpractices.html#debugsshoulduselogginglevel","message":"\r\nCalls to System.debug should specify a logging level.\r\n"}]}]
++@@ -70 +70 @@ public with sharing class AccountInsertClass {
++-          System.debug('Hello Hi');
+++          System.debug('Hello');
@@ -167 +323 @@ diff --git a/force-app/main/default/classes/Account_Insert.cls b/force-app/main/
-index 14cff41..9a5148a 100644
+index 9a5148a..1ec7a54 100644
@@ -171,2 +327,20 @@ index 14cff41..9a5148a 100644
--          System.debug('Hello Hi');
-+          System.debug('Hello');
+-          System.debug('Hello');
++          System.debug('Hi');
+diff --git a/scanner-reports/filtered-scanner-report-.json b/scanner-reports/filtered-scanner-report-.json
+new file mode 100644
+index 0000000..e69de29
+diff --git a/scanner-reports/final-filtered-scanner-report.json b/scanner-reports/final-filtered-scanner-report.json
+new file mode 100644
+index 0000000..fe51488
+--- /dev/null
++++ b/scanner-reports/final-filtered-scanner-report.json
+@@ -0,0 +1 @@
++[]
+diff --git a/scanner-reports/scanner-report-.json b/scanner-reports/scanner-report-.json
+new file mode 100644
+index 0000000..e670f52
+--- /dev/null
++++ b/scanner-reports/scanner-report-.json
+@@ -0,0 +1 @@
++[{"engine":"pmd","fileName":"C:\\GitHub Folder\\CodeScanningSolution\\force-app\\main\\default\\classes\\Account_Insert.cls","violations":[{"line":20,"column":11,"endLine":20,"endColumn":35,"severity":3,"ruleName":"AvoidDebugStatements","category":"Performance","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_performance.html#avoiddebugstatements","message":"\r\nAvoid debug statements since they impact on performance\r\n"},{"line":20,"column":11,"endLine":20,"endColumn":35,"severity":3,"ruleName":"DebugsShouldUseLoggingLevel","category":"Best Practices","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_bestpractices.html#debugsshoulduselogginglevel","message":"\r\nCalls to System.debug should specify a logging level.\r\n"},{"line":70,"column":11,"endLine":70,"endColumn":32,"severity":3,"ruleName":"AvoidDebugStatements","category":"Performance","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_performance.html#avoiddebugstatements","message":"\r\nAvoid debug statements since they impact on performance\r\n"},{"line":70,"column":11,"endLine":70,"endColumn":32,"severity":3,"ruleName":"DebugsShouldUseLoggingLevel","category":"Best Practices","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_bestpractices.html#debugsshoulduselogginglevel","message":"\r\nCalls to System.debug should specify a logging level.\r\n"}]}]
+\ No newline at end of file
diff --git a/force-app/main/default/classes/Account_Insert.cls b/force-app/main/default/classes/Account_Insert.cls
index 1ec7a54..870d508 100644
--- a/force-app/main/default/classes/Account_Insert.cls
+++ b/force-app/main/default/classes/Account_Insert.cls
@@ -70 +70 @@ public with sharing class AccountInsertClass {
-          System.debug('Hi');
+          System.debug('Hi Hello');
diff --git a/scanner-reports/filtered-scanner-report-.json b/scanner-reports/filtered-scanner-report-.json
deleted file mode 100644
index e69de29..0000000
diff --git a/scanner-reports/final-filtered-scanner-report.json b/scanner-reports/final-filtered-scanner-report.json
deleted file mode 100644
index fe51488..0000000
--- a/scanner-reports/final-filtered-scanner-report.json
+++ /dev/null
@@ -1 +0,0 @@
-[]
diff --git a/scanner-reports/scanner-report-.json b/scanner-reports/scanner-report-.json
deleted file mode 100644
index e670f52..0000000
--- a/scanner-reports/scanner-report-.json
+++ /dev/null
@@ -1 +0,0 @@
-[{"engine":"pmd","fileName":"C:\\GitHub Folder\\CodeScanningSolution\\force-app\\main\\default\\classes\\Account_Insert.cls","violations":[{"line":20,"column":11,"endLine":20,"endColumn":35,"severity":3,"ruleName":"AvoidDebugStatements","category":"Performance","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_performance.html#avoiddebugstatements","message":"\r\nAvoid debug statements since they impact on performance\r\n"},{"line":20,"column":11,"endLine":20,"endColumn":35,"severity":3,"ruleName":"DebugsShouldUseLoggingLevel","category":"Best Practices","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_bestpractices.html#debugsshoulduselogginglevel","message":"\r\nCalls to System.debug should specify a logging level.\r\n"},{"line":70,"column":11,"endLine":70,"endColumn":32,"severity":3,"ruleName":"AvoidDebugStatements","category":"Performance","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_performance.html#avoiddebugstatements","message":"\r\nAvoid debug statements since they impact on performance\r\n"},{"line":70,"column":11,"endLine":70,"endColumn":32,"severity":3,"ruleName":"DebugsShouldUseLoggingLevel","category":"Best Practices","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_bestpractices.html#debugsshoulduselogginglevel","message":"\r\nCalls to System.debug should specify a logging level.\r\n"}]}]
\ No newline at end of file
